조이스틱
문제 설명
조이스틱으로 알파벳 이름을 완성하세요. 맨 처음엔 A로만 이루어져 있습니다.
ex) 완성해야 하는 이름이 세 글자면 AAA, 네 글자면 AAAA

조이스틱을 각 방향으로 움직이면 아래와 같습니다.

▲ - 다음 알파벳
▼ - 이전 알파벳 (A에서 아래쪽으로 이동하면 Z로)
◀ - 커서를 왼쪽으로 이동 (첫 번째 위치에서 왼쪽으로 이동하면 마지막 문자에 커서)
▶ - 커서를 오른쪽으로 이동 (마지막 위치에서 오른쪽으로 이동하면 첫 번째 문자에 커서)
예를 들어 아래의 방법으로 "JAZ"를 만들 수 있습니다.

- 첫 번째 위치에서 조이스틱을 위로 9번 조작하여 J를 완성합니다.
- 조이스틱을 왼쪽으로 1번 조작하여 커서를 마지막 문자 위치로 이동시킵니다.
- 마지막 위치에서 조이스틱을 아래로 1번 조작하여 Z를 완성합니다.
따라서 11번 이동시켜 "JAZ"를 만들 수 있고, 이때가 최소 이동입니다.
만들고자 하는 이름 name이 매개변수로 주어질 때, 이름에 대해 조이스틱 조작 횟수의 최솟값을 return 하도록 solution 함수를 만드세요.

제한 사항
name은 알파벳 대문자로만 이루어져 있습니다.
name의 길이는 1 이상 20 이하입니다.
입출력 예
name	return
"JEROEN"	56
"JAN"	23
출처

※ 공지 - 2019년 2월 28일 테스트케이스가 추가되었습니다.
※ 공지 - 2022년 1월 14일 지문 수정 및 테스트케이스가 추가되었습니다. 이로 인해 이전에 통과하던 코드가 더 이상 통과하지 않을 수 있습니다.
코드 
#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
using namespace std;

int solution(string name) {
    int answer = 0;
    int idx = 0;
    int move = name.length() - 1;
    for (int i = 0; i < name.length(); i++) {
        name[i] - 'A' < 'Z' - name[i] + 1 ? answer += name[i] - 'A' : answer += 'Z' - name[i] + 1;
    

        idx = i + 1;
        // 연속되는 A 갯수 확인
        while (idx < name.length() && name[idx] == 'A') {
            idx++;
        }

        move = min(move, int(i * 2 + name.length() - idx));// A가 시작되는 지점까지 갔다가 다시 원점으로 돌아와서 왼쪽으로 A가 끝나는 지점까지 가는 방법
        move = min(move, int((name.length() - idx) * 2 + i));//먼저 왼쪽으로 A의 연속이 끊기는 점까지 왔다가 다시 원점으로 돌아가서 A가 시작되는 지점으로 가는 방법.
    }

    return answer + move;
}

int main(void) {
    string name = "JEROEN";
    cout << solution(name);
}
그리디로 되있지만 완탐으로 풀었다. 그리디 방식으로는 어떻게 해야할 지 도저히 떠오르지 않았기에..무하튼 0번째 인덱스부터 연속된 A의 배열을 분리한다음 배열의 시작점과 끝나는 지점으로 
앞뒤로 이동하는 방식으로 계산해주면 된다.
