최소비용 구하기 2 성공스페셜 저지

 
시간 제한메모리 제한제출정답맞힌 사람정답 비율
1 초	256 MB	15950	5817	4033	37.263%
문제
n(1≤n≤1,000)개의 도시가 있다. 그리고 한 도시에서 출발하여 다른 도시에 도착하는 m(1≤m≤100,000)개의 버스가 있다. 우리는 A번째 도시에서 B번째 도시까지 가는데 드는 버스 비용을 최소화 시키려고 한다. 그러면 A번째 도시에서 B번째 도시 까지 가는데 드는 최소비용과 경로를 출력하여라. 항상 시작점에서 도착점으로의 경로가 존재한다.

입력
첫째 줄에 도시의 개수 n(1≤n≤1,000)이 주어지고 둘째 줄에는 버스의 개수 m(1≤m≤100,000)이 주어진다. 그리고 셋째 줄부터 m+2줄까지 다음과 같은 버스의 정보가 주어진다. 먼저 처음에는 그 버스의 출발 도시의 번호가 주어진다. 그리고 그 다음에는 도착지의 도시 번호가 주어지고 또 그 버스 비용이 주어진다. 버스 비용은 0보다 크거나 같고, 100,000보다 작은 정수이다.

그리고 m+3째 줄에는 우리가 구하고자 하는 구간 출발점의 도시번호와 도착점의 도시번호가 주어진다.

출력
첫째 줄에 출발 도시에서 도착 도시까지 가는데 드는 최소 비용을 출력한다.

둘째 줄에는 그러한 최소 비용을 갖는 경로에 포함되어있는 도시의 개수를 출력한다. 출발 도시와 도착 도시도 포함한다.

셋째 줄에는 최소 비용을 갖는 경로를 방문하는 도시 순서대로 출력한다.

예제 입력 1 복사
5
8
1 2 2
1 3 3
1 4 1
1 5 10
2 4 2
3 4 1
3 5 1
4 5 3
1 5
예제 출력 1 복사
4
3
1 3 5
출처
문제를 만든 사람: baekjoon
잘못된 데이터를 찾은 사람: bghgu
데이터를 추가한 사람: djm03178, sait2000
문제의 오타를 찾은 사람: operaghost
빠진 조건을 찾은 사람: upple1
알고리즘 분류
그래프 이론
다익스트라




#include<iostream>
#include<vector>
#include<queue>
using namespace std;
int V, E;
vector<pair<int, int>> graph[1001];
int start, dest;
int d[1001];
int parent[1001];
vector<int> path;
void dijkstra() {

	for (int i = 1; i <= V; i++) {
		d[i] = 987654321;
		parent[i] = i;
	}

	priority_queue<pair<int, int>>q;
	d[start] = 0;
	q.push({ start,0 });

	while (!q.empty()) {
		int cur = q.top().first;
		int dist = -q.top().second;
		q.pop();

		if (d[cur] < dist)continue;

		for (int i = 0; i < graph[cur].size(); i++) {
			int cost = dist + graph[cur][i].second;

			if (d[graph[cur][i].first] > cost) {
				d[graph[cur][i].first] = cost;
				q.push({ graph[cur][i].first ,-cost });
				parent[graph[cur][i].first] = cur;

			}
		}
	}

}
int Find(int x) {
	if (parent[x] == x) {
		return 0;
	}
	else {
		path.push_back(parent[x]);
		return parent[x] = Find(parent[x]);
	}
}
int main() {
	cin >> V >> E;

	for (int i = 0; i < E; i++) {
		int from, to, weight;
		cin >> from >> to >> weight;
		graph[from].push_back({ to,weight });
	}
	cin >> start >> dest;
	dijkstra();
	path.push_back(dest);
	Find(dest);
	cout << d[dest]<<'\n';
	cout << path.size() << '\n';
	for (int i = path.size() - 1; i >= 0; i--) {
		cout << path[i] << ' ';
	}

	return 0;
}


일단 다익스트라알고리즘을 통해서 최단경로를 구한다.
최단경로를 구하는 와중에 다익스트라는 각 정점을 기준으로 정점을 지날 때 
그 정점을 거쳐서 한 정점으로 가는 거리가 적다면 그 정점을 거쳐서 가는 걸로 경로를 정하는데
이때 목적지가 5를 향해간다고 하면 5까지 오는데 찍고오는 정점은 항상 5를 오기위해서 반드시 거쳐야하는 정점이된다.

이러한 특성을 이용해서 각각의 정점에는 그 정점으로 오기전에 들린 노드를 표시해두었다 . 그래서 dest정점부터 하나씩 타고 정점을 가면서 정점을 순회하면 그게 dest까지 오는데 최단경로이다.
