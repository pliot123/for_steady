Puyo Puyo 성공
 

 
시간 제한메모리 제한제출정답맞힌 사람정답 비율
1 초	256 MB	16047	6230	4463	37.316%
문제
뿌요뿌요의 룰은 다음과 같다.

필드에 여러 가지 색깔의 뿌요를 놓는다. 뿌요는 중력의 영향을 받아 아래에 바닥이나 다른 뿌요가 나올 때까지 아래로 떨어진다.

뿌요를 놓고 난 후, 같은 색 뿌요가 4개 이상 상하좌우로 연결되어 있으면 연결된 같은 색 뿌요들이 한꺼번에 없어진다. 이때 1연쇄가 시작된다.

뿌요들이 없어지고 나서 위에 다른 뿌요들이 있다면, 역시 중력의 영향을 받아 차례대로 아래로 떨어지게 된다.

아래로 떨어지고 나서 다시 같은 색의 뿌요들이 4개 이상 모이게 되면 또 터지게 되는데, 터진 후 뿌요들이 내려오고 다시 터짐을 반복할 때마다 1연쇄씩 늘어난다.

터질 수 있는 뿌요가 여러 그룹이 있다면 동시에 터져야 하고 여러 그룹이 터지더라도 한번의 연쇄가 추가된다.

남규는 최근 뿌요뿌요 게임에 푹 빠졌다. 이 게임은 1:1로 붙는 대전게임이라 잘 쌓는 것도 중요하지만, 상대방이 터뜨린다면 연쇄가 몇 번이 될지 바로 파악할 수 있는 능력도 필요하다. 하지만 아직 실력이 부족하여 남규는 자기 필드에만 신경 쓰기 바쁘다. 상대방의 필드가 주어졌을 때, 연쇄가 몇 번 연속으로 일어날지 계산하여 남규를 도와주자!

입력
총 12개의 줄에 필드의 정보가 주어지며, 각 줄에는 6개의 문자가 있다.

이때 .은 빈공간이고 .이 아닌것은 각각의 색깔의 뿌요를 나타낸다.

R은 빨강, G는 초록, B는 파랑, P는 보라, Y는 노랑이다.

입력으로 주어지는 필드는 뿌요들이 전부 아래로 떨어진 뒤의 상태이다. 즉, 뿌요 아래에 빈 칸이 있는 경우는 없다.

출력
현재 주어진 상황에서 몇연쇄가 되는지 출력한다. 하나도 터지지 않는다면 0을 출력한다.

예제 입력 1 복사
......
......
......
......
......
......
......
......
.Y....
.YG...
RRYG..
RRYGG.
예제 출력 1 복사
3
뿌요 뿌요 게임이다

음 구현해야할 것은 
4개의 같은 색깔이 모여서 터지는거
근데 한번에 8개가 터질 수도 있다.6개도 터질 수 있다.  
RRXY
RRYY
RRYG 
이 상태라면 G하나만 남겨야한다.
RRXY
RGYY
RRYG 
이 상태라면
. . . . 
. . . .
. . . .
.G.G이렇게 되고
RGGY
RGYY
RRYG 
이 상태라면 R터지고 Y터지고 G터진다
터지고 난 다음 중력에 의해 밑으로 떨어지는 거 

음,,, 우선 공간이 별로 안크기때문에 
dfs를 쫙 한번 돌리고 멈춰진 상태에서 폭발이 가능한 것들을 다 폭발 시켜준다.
그런 다음 중력에 의해 밑으로 떨어지는 것을 구현하고 dfs를 전체 몇번 실행했는지 세어주면 될 것 같다. dfs가 동작하지않을때까지
밑으로 내리는 거 어케 구현할까
Q
R
Q - Map[idx][x]
Q
R - MAP[y][x]
G
K
이런 상황이면 
쭉쭉땅겨내려주면된다 여기서 Q는 .이다

 

#include <iostream>
#include<queue>
#include<string>
using namespace std;
int N, M;
int answer = 0;
int dy[4] = { -1,1,0,0 };
int dx[4] = { 0,0,1,-1 };
bool visited[12][6];
char Map[12][6];
bool check = false;
vector<pair<int, int>> v;


void dfs(int y, int x, char c) {
for (int i = 0; i < 4; i++) {
int ny = y + dy[i];
int nx = x + dx[i];
if (ny > 11 || ny < 0 || nx>5 || nx < 0)continue;
if (Map[ny][nx] == c && visited[ny][nx] == false) {
visited[ny][nx] = true;
v.push_back({ ny,nx });
dfs(ny, nx, c);
}
}
return;
}
void one_cycle() {

check = false;
for (int i = 0; i < 12; i++) {
for (int j = 0; j < 6; j++) {
if (Map[i][j] != 'Q') {
visited[i][j] = true;
v.push_back({ i,j });
dfs(i, j, Map[i][j]);
if (v.size() < 4)v.clear();
else {
check = true;
for (int k = 0; k < v.size(); k++) {
int y = v[k].first;
int x = v[k].second;
Map[y][x] = 'Q';
}
v.clear();
}
}
}
}
for (int i = 0; i < 12; i++)
for (int j = 0; j < 6; j++)
visited[i][j] = false;//visited 초기화
}

void down() {//중력에 의한 떨어짐 구현
for (int x = 0; x < 6; x++) {

for (int y = 11; y >= 0; y--) {
if (Map[y][x] != 'Q')continue;
int idx = y-1;
while (1) {
if (idx < 0)break;
if (Map[idx][x] != 'Q') {
Map[y][x] = Map[idx][x];
Map[idx][x] = 'Q';
break;
}
idx--;
}
}
}
}
void solve() {
while (1) {
one_cycle();
if (check == false)break;
down();
answer++;
}
}

int main() {
for (int i = 0; i < 12; i++) {
string s; cin >> s;
for (int j = 0; j < 6; j++) {
if (s[j] == '.') {
Map[i][j] = 'Q';
continue;
}
Map[i][j] = s[j];
}
}
solve();
cout << answer;
return 0;
}

 

일단 운제를 잘읽어야한다.

이때 .은 빈공간이고 .이 아닌것은 각각의 색깔의 뿌요를 나타낸다.

'.'이건 그냥 빈공간이라서 문자로 보지않는다. 근데 난 그걸 몰랐따 까먹었다랄까ㅏㅏ?

우선 이게 무한루프만들어서 디버깅안하고 해결하고 싶은 욕심에 시간을 좀 태웟다.

결국엔 Q로 치환해줬다.

두번째는

void down() {//중력에 의한 떨어짐 구현
for (int x = 0; x < 6; x++) {

for (int y = 11; y >= 0; y--) {
if (Map[y][x] != 'Q')continue;
int idx = y-1;
while (1) {
if (idx < 0)break;
if (Map[idx][x] != 'Q') {
Map[y][x] = Map[idx][x];
Map[idx][x] = 'Q';
break;
}
idx--;
}
}
}
}


if (idx < 0)break;

idx에 브레이크를 처음에 걸지 않았는데, idx가 -까지 낮아져서

Map[-3][x]이런 공간을 참조했다. 뭐,, 빈공간이거나 트레쉬값이 포함되어있었기에 자꾸 solve의 while문이 한바퀴 돌면 

전체 값이 다 날아갔다. 그래서 또 시간을 좀 날렸다 . 그래도 풀었다.
