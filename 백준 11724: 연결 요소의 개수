연결 요소의 개수 성공

 
시간 제한메모리 제한제출정답맞힌 사람정답 비율
3 초	512 MB	61304	28659	18776	43.631%
문제
방향 없는 그래프가 주어졌을 때, 연결 요소 (Connected Component)의 개수를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 정점의 개수 N과 간선의 개수 M이 주어진다. (1 ≤ N ≤ 1,000, 0 ≤ M ≤ N×(N-1)/2) 둘째 줄부터 M개의 줄에 간선의 양 끝점 u와 v가 주어진다. (1 ≤ u, v ≤ N, u ≠ v) 같은 간선은 한 번만 주어진다.

출력
첫째 줄에 연결 요소의 개수를 출력한다.

예제 입력 1 복사
6 5
1 2
2 5
5 1
3 4
4 6
예제 출력 1 복사
2
예제 입력 2 복사
6 8
1 2
2 5
5 1
3 4
4 6
5 4
2 4
2 3
예제 출력 2 복사
1
출처
문제를 만든 사람: baekjoon
데이터를 추가한 사람: djm03178, YunGoon
잘못된 조건을 찾은 사람: songjuh


알고리즘 분류
그래프 이론
그래프 탐색
너비 우선 탐색
깊이 우선 탐색


코드 :#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int n, m;
vector<int> list[1001];
int visited[1001];
queue<int> q;


void dfs(int cur) {
    
    for (int i = 0; i < list[cur].size(); i++) {
        if (visited[list[cur][i]] == false) {
            visited[list[cur][i]] = true;
            dfs(list[cur][i]);
        }
    }
}

void bfs(int start) {
    visited[start] = true;
    q.push(start);

    while (!q.empty()) {
        int cur = q.front();
        q.pop();

        for (int i = 0; i < list[cur].size(); i++) {
            if (visited[list[cur][i]] == false) {
                visited[list[cur][i]] = true;
                q.push(list[cur][i]);
            }
        }
    }

}

int main() {
    cin >> n >> m;
    int cnt = 0;
    for (int i = 0; i < m; i++) {
        int from, to;
        cin >> from >> to;
        list[from].push_back(to);
        list[to].push_back(from);
    }

    for (int i = 1; i <= n; i++) {
        if (visited[i] == false) {
            bfs(i);
            cnt++;
        }
    }

    cout << cnt << endl;

    return 0;
}
