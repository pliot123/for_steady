알파벳 실패다국어
 
시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
2 초	256 MB	67619	21650	13269	29.304%
문제
세로 R칸, 가로 C칸으로 된 표 모양의 보드가 있다. 보드의 각 칸에는 대문자 알파벳이 하나씩 적혀 있고, 좌측 상단 칸 (1행 1열) 에는 말이 놓여 있다.

말은 상하좌우로 인접한 네 칸 중의 한 칸으로 이동할 수 있는데, 새로 이동한 칸에 적혀 있는 알파벳은 지금까지 지나온 모든 칸에 적혀 있는 알파벳과는 달라야 한다. 즉, 같은 알파벳이 적힌 칸을 두 번 지날 수 없다.

좌측 상단에서 시작해서, 말이 최대한 몇 칸을 지날 수 있는지를 구하는 프로그램을 작성하시오. 말이 지나는 칸은 좌측 상단의 칸도 포함된다.

입력
첫째 줄에 R과 C가 빈칸을 사이에 두고 주어진다. (1 ≤ R,C ≤ 20) 둘째 줄부터 R개의 줄에 걸쳐서 보드에 적혀 있는 C개의 대문자 알파벳들이 빈칸 없이 주어진다.

출력
첫째 줄에 말이 지날 수 있는 최대의 칸 수를 출력한다.

예제 입력 1 
2 4
CAAB
ADCB
예제 출력 1 
3
예제 입력 2 
3 6
HFDFFB
AJHGDH
DGAGEH
예제 출력 2 
6
예제 입력 3 
5 5
IEFCJ
FHFKC
FFALF
HFGCF
HMCHH
예제 출력 3 
10
출처
Olympiad > Croatian Highschool Competitions in Informatics > 2002 > Regional Competition - Juniors 3번

데이터를 추가한 사람: august14, doju, jh05013
알고리즘 분류
보기
코드 

#include <iostream>
#include <vector>
#include <string>
#include <queue>
using namespace std;
bool visited[21][21];
int dy[4] = { -1,1,0,0 };
int dx[4] = { 0,0,1,-1 };
int answer = 0;

int n, m; 
string s[21];
void dfs(string temp, char c, int y, int x, int cnt ) {
    temp += c;
    if (answer < cnt)
        answer = cnt;

    for (int i = 0; i < 4; i++) {
        int ny = y + dy[i];
        int nx = x + dx[i];
        bool check = false;

        if (ny > n - 1 || nx > m - 1 || ny < 0 || nx < 0)continue;

        for (int a = 0; a < temp.size(); a++) {
            if (temp[a] == s[ny][nx]) {
                check = true;
                break;
            }
        }
        if (check == false && visited[ny][nx]==false) {
            visited[ny][nx] = true;
            dfs(temp, s[ny][nx], ny, nx, cnt + 1);
            visited[ny][nx] = false;
        }
    }

}

int main() {
    
    cin >> n >> m;

    for (int i = 0; i < n; i++) {
        cin >> s[i];
    }

    string temp;
    visited[0][0] = true;
    dfs(temp, s[0][0],0,0,0);
    cout << answer+1;
    

    return 0;
}

이렇게 짜니까 자꾸 시간초과가 난다.
