치즈 실패
 

 
시간 제한메모리 제한제출정답맞힌 사람정답 비율
1 초	128 MB	16474	8701	6351	52.802%
문제
아래 <그림 1>과 같이 정사각형 칸들로 이루어진 사각형 모양의 판이 있고, 그 위에 얇은 치즈(회색으로 표시된 부분)가 놓여 있다. 판의 가장자리(<그림 1>에서 네모 칸에 X친 부분)에는 치즈가 놓여 있지 않으며 치즈에는 하나 이상의 구멍이 있을 수 있다.

이 치즈를 공기 중에 놓으면 녹게 되는데 공기와 접촉된 칸은 한 시간이 지나면 녹아 없어진다. 치즈의 구멍 속에는 공기가 없지만 구멍을 둘러싼 치즈가 녹아서 구멍이 열리면 구멍 속으로 공기가 들어가게 된다. <그림 1>의 경우, 치즈의 구멍을 둘러싼 치즈는 녹지 않고 ‘c’로 표시된 부분만 한 시간 후에 녹아 없어져서 <그림 2>와 같이 된다.


<그림 1> 원래 치즈 모양

다시 한 시간 후에는 <그림 2>에서 ‘c’로 표시된 부분이 녹아 없어져서 <그림 3>과 같이 된다.


<그림 2> 한 시간 후의 치즈 모양


<그림 3> 두 시간 후의 치즈 모양

<그림 3>은 원래 치즈의 두 시간 후 모양을 나타내고 있으며, 남은 조각들은 한 시간이 더 지나면 모두 녹아 없어진다. 그러므로 처음 치즈가 모두 녹아 없어지는 데는 세 시간이 걸린다. <그림 3>과 같이 치즈가 녹는 과정에서 여러 조각으로 나누어 질 수도 있다.

입력으로 사각형 모양의 판의 크기와 한 조각의 치즈가 판 위에 주어졌을 때, 공기 중에서 치즈가 모두 녹아 없어지는 데 걸리는 시간과 모두 녹기 한 시간 전에 남아있는 치즈조각이 놓여 있는 칸의 개수를 구하는 프로그램을 작성하시오.

입력
첫째 줄에는 사각형 모양 판의 세로와 가로의 길이가 양의 정수로 주어진다. 세로와 가로의 길이는 최대 100이다. 판의 각 가로줄의 모양이 윗 줄부터 차례로 둘째 줄부터 마지막 줄까지 주어진다. 치즈가 없는 칸은 0, 치즈가 있는 칸은 1로 주어지며 각 숫자 사이에는 빈칸이 하나씩 있다.

출력
첫째 줄에는 치즈가 모두 녹아서 없어지는 데 걸리는 시간을 출력하고, 둘째 줄에는 모두 녹기 한 시간 전에 남아있는 치즈조각이 놓여 있는 칸의 개수를 출력한다.

예제 입력 1 복사
13 12
0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 1 1 0 0 0
0 1 1 1 0 0 0 1 1 0 0 0
0 1 1 1 1 1 1 0 0 0 0 0
0 1 1 1 1 1 0 1 1 0 0 0
0 1 1 1 1 0 0 1 1 0 0 0
0 0 1 1 0 0 0 1 1 0 0 0
0 0 1 1 1 1 1 1 1 0 0 0
0 0 1 1 1 1 1 1 1 0 0 0
0 0 1 1 1 1 1 1 1 0 0 0
0 0 1 1 1 1 1 1 1 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0
예제 출력 1 복사
3
5
출처
Olympiad > 한국정보올림피아드 > KOI 2000 > 초등부 3번

문제의 오타를 찾은 사람: compro0317, shawn050912
데이터를 추가한 사람: jung2381187
 

 

공기 안닫는 부분은 어떻게 처리할까
이게 이 문제의 핵심

내부 공기 외부 공기를 가려줄 dfs를 사용할 수도 있다.
dfs
내부공기 2, 외부공기 0
ex) 다 내부공기라 생각하고 탐색하다가 벽에 부딪히면 이때까지 내부공기라고 카운트했던 것들을 큐에 담아뒀다가 이녀석들을 다 0으로 만들어준다 
이러면 안에있는 공기는 외벽에 부딪히지 못해서 2로 표시가 되어남고 이는 나중에 공기에 닿아 녹는 치즈를 가려줄 수 있다. 
근데 그러면 100,100이기때문에 시간 초과가 날 확률이 높아보인다.
다른 방식을 생각해보자.

그럴빠엔 바깥공기를 구별해주면 어떨까
bfs로 바깥공기는 다 2로 바꿔주면?

라고 해서 

풀었는데,, 시간초과다

#include <iostream>
#include <vector>
#include <queue>
using namespace std;
int dy[4] = {0,-1,0,1};
int dx[4] = {1,0,-1,0};
int arr[101][101];
int visited[101][101];
int temp[101][101];
int n, m;

void outAir() {
queue<pair<int, int>> q;
q.push({ 0,0 });
visited[0][0] = true;
while (!q.empty()) {
int y = q.front().first;
int x = q.front().second;
q.pop();

for (int i = 0; i < 4; i++) {
int ny = y + dy[i], nx = x + dx[i];
if (ny > n - 1 || nx > n - 1 || ny < 0 || nx < 0)continue;
if (visited[ny][nx] == true)continue;
if (arr[ny][nx]==0 ) {
visited[ny][nx] = true;
arr[ny][nx] = 2;
q.push({ ny,nx });
}
}

}
}

int main() {
int cheese= 0;
int cnt=0;//마지막 치즈의 갯수
int step = 0;//치즈녹이는 단계
cin >> n>> m;

for (int i = 0; i < n; i++) {
for (int j = 0; j < m; j++) {
cin >> arr[i][j];
if (arr[i][j] == 1)cheese++;
else {
temp[i][j] = 1;
}
}
}

while (cheese) {
step++;
outAir();
cnt = cheese;

for (int i = 0; i < n; i++) {
for (int j = 0; j < m; j++) {

if (arr[i][j] == 1) {
for (int k = 0; k < 4; k++) {
int qy = i + dy[k], qx = j + dx[k];
if (qy > n - 1 || qy<0 || qx>m - 1 || qx < 0)continue;
if (arr[qy][qx] == 2) {
arr[i][j] = 0;
temp[i][j] = 1;
cheese--;
//녹였으면 브레이크걸고 다음거
break;
}
}
}

}
}

for (int i = 0; i < n; i++) {
for (int j = 0; j < n; j++) {
visited[i][j] = false;
if (temp[i][j] == 1) {
arr[i][j] = 0;
}
}
}
}

cout << step << '\n' << cnt;


return 0;
}

다시푼다면 그땐 꼭 좋은코드를 올리겠다..
