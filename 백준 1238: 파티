백준 1238: 파티
카테고리 없음 2022. 5. 15. 18:53
수정 | 비공개로 변경합니다 | 삭제
파티 성공다국어
한국어   

 
시간 제한메모리 제한제출정답맞힌 사람정답 비율
1 초	128 MB	26789	13087	8642	47.008%
문제
N개의 숫자로 구분된 각각의 마을에 한 명의 학생이 살고 있다.

어느 날 이 N명의 학생이 X (1 ≤ X ≤ N)번 마을에 모여서 파티를 벌이기로 했다. 이 마을 사이에는 총 M개의 단방향 도로들이 있고 i번째 길을 지나는데 Ti(1 ≤ Ti ≤ 100)의 시간을 소비한다.

각각의 학생들은 파티에 참석하기 위해 걸어가서 다시 그들의 마을로 돌아와야 한다. 하지만 이 학생들은 워낙 게을러서 최단 시간에 오고 가기를 원한다.

이 도로들은 단방향이기 때문에 아마 그들이 오고 가는 길이 다를지도 모른다. N명의 학생들 중 오고 가는데 가장 많은 시간을 소비하는 학생은 누구일지 구하여라.

입력
첫째 줄에 N(1 ≤ N ≤ 1,000), M(1 ≤ M ≤ 10,000), X가 공백으로 구분되어 입력된다. 두 번째 줄부터 M+1번째 줄까지 i번째 도로의 시작점, 끝점, 그리고 이 도로를 지나는데 필요한 소요시간 Ti가 들어온다. 시작점과 끝점이 같은 도로는 없으며, 시작점과 한 도시 A에서 다른 도시 B로 가는 도로의 개수는 최대 1개이다.

모든 학생들은 집에서 X에 갈수 있고, X에서 집으로 돌아올 수 있는 데이터만 입력으로 주어진다.

출력
첫 번째 줄에 N명의 학생들 중 오고 가는데 가장 오래 걸리는 학생의 소요시간을 출력한다.

예제 입력 1 복사
4 8 2
1 2 4
1 3 2
1 4 7
2 1 1
2 3 5
3 1 2
3 4 4
4 2 3
예제 출력 1 복사
10
출처
Olympiad > USA Computing Olympiad > 2006-2007 Season > USACO February 2007 Contest > Silver 3번

문제를 번역한 사람: author6
빠진 조건을 찾은 사람: his130
알고리즘 분류
그래프 이론
다익스트라
 

x번 마을에 모여서 파티를 한다.
M개의 단방향 도로가 있고 
i번째 길을 지나는데 T시간을 소비

N명의 학생들 중에 오고 가는데 가장 많은 시간을 소비하는 학생이 누구인지 구해야한다.

N M X가 공백으로 구분된다.

한 점에서 한점까지의 최소거리를 구하는  다 익스트라알고리즘으로 풀어야한다.

4 8 2
1 2 4
1 3 2
1 4 7
2 1 1
2 3 5
3 1 2
3 4 4
4 2 3

 

#include<iostream>
#include<vector>
#include<queue>
#define INF 987654321
using namespace std;

int V, E, X;//정점, 간선, 모이는 마을
vector<pair<int, int>> graph[1001];
int d[1001];//점사이 거리

void dijkstra(int start) {
	priority_queue<pair<int, int>> pq;
	for (int i = 1; i <= V; i++)
		d[i] = INF;

	d[start] = 0;
	pq.push({ start,0});

	while (!pq.empty()) {
		int cur_idx = pq.top().first;//여기는 어디?
		int cur_dist = -pq.top().second;//여기까지오는데 거리
		pq.pop();

		if (d[cur_idx] < cur_dist)continue;

		for (int i = 0; i < graph[cur_idx].size(); i++) {
			int cost = cur_dist + graph[cur_idx][i].second;

			if (cost < d[graph[cur_idx][i].first]) {
				d[graph[cur_idx][i].first] = cost;
				pq.push({ graph[cur_idx][i].first,-cost });
			}
		}
	}


}

int main() {
	cin >> V >> E >> X;
	int answer = 0;
	int from, to, weight;
	for (int i = 0; i < E; i++) {
		cin >> from >> to >> weight;
		graph[from].push_back({ to,weight });
	}

	for (int i = 1; i <= V; i++) {
		int k = 0;
		dijkstra(i);
		k += d[X];
		dijkstra(X);
		k += d[i];
		answer = max(answer, k);
	}
	cout << answer;

	return 0;
}
