백준1937 : 욕심쟁이 판다
카테고리 없음 2022. 5. 19. 18:54
수정 | 비공개로 변경합니다 | 삭제
욕심쟁이 판다 성공
 

 
시간 제한메모리 제한제출정답맞힌 사람정답 비율
2 초	256 MB	32721	10549	6957	29.865%
문제
n × n의 크기의 대나무 숲이 있다. 욕심쟁이 판다는 어떤 지역에서 대나무를 먹기 시작한다. 그리고 그 곳의 대나무를 다 먹어 치우면 상, 하, 좌, 우 중 한 곳으로 이동을 한다. 그리고 또 그곳에서 대나무를 먹는다. 그런데 단 조건이 있다. 이 판다는 매우 욕심이 많아서 대나무를 먹고 자리를 옮기면 그 옮긴 지역에 그 전 지역보다 대나무가 많이 있어야 한다.

이 판다의 사육사는 이런 판다를 대나무 숲에 풀어 놓아야 하는데, 어떤 지점에 처음에 풀어 놓아야 하고, 어떤 곳으로 이동을 시켜야 판다가 최대한 많은 칸을 방문할 수 있는지 고민에 빠져 있다. 우리의 임무는 이 사육사를 도와주는 것이다. n × n 크기의 대나무 숲이 주어져 있을 때, 이 판다가 최대한 많은 칸을 이동하려면 어떤 경로를 통하여 움직여야 하는지 구하여라.

입력
첫째 줄에 대나무 숲의 크기 n(1 ≤ n ≤ 500)이 주어진다. 그리고 둘째 줄부터 n+1번째 줄까지 대나무 숲의 정보가 주어진다. 대나무 숲의 정보는 공백을 사이로 두고 각 지역의 대나무의 양이 정수 값으로 주어진다. 대나무의 양은 1,000,000보다 작거나 같은 자연수이다.

출력
첫째 줄에는 판다가 이동할 수 있는 칸의 수의 최댓값을 출력한다.

예제 입력 1 복사
4
14 9 12 10
1 11 5 4
7 15 2 13
6 3 16 8
예제 출력 1 복사
4
출처
문제의 오타를 찾은 사람: apjw6112, Hibbah
데이터를 추가한 사람: logwns
잘못된 데이터를 찾은 사람: thsdnjstjq1, tncks0121
빠진 조건을 찾은 사람: wkd48632
알고리즘 분류
다이나믹 프로그래밍
그래프 이론
그래프 탐색
깊이 우선 탐색
 

 

#include<iostream>
#include <algorithm>
using namespace std;
int N, Map[501][501];
int dp[501][501];
int answer;
int dy[4] = { 0,0,-1,1 };
int dx[4] = { -1,1,0,0 };
int dfs(int y, int x) {
	if (dp[y][x]) return dp[y][x];
	dp[y][x] = 1;
	for (int i = 0; i < 4; i++) {
		int ny = y + dy[i];
		int nx = x + dx[i];
		if (Map[ny][nx] > Map[y][x])
			dp[y][x] = max(dp[y][x], dfs(ny, nx) + 1);
	}
	return dp[y][x];
}


int main() {
	cin >> N;
	for (int i = 0; i < N; i++) 
		for (int j = 0; j < N; j++)
			cin >> Map[i][j];

	for (int i = 0; i < N; i++) 
		for (int j = 0; j < N; j++) {
			answer = max(answer, dfs(i, j));
		}

	cout << answer;
	return 0;
}
처음엔bfs,그다음엔 dfs로풀다가 계속 시간초과가 떠서 dp로 풀게되었다. dp로 풀면 한번에 많은 양의 칸을 처리해줄 수 있어서 dfs랑 동작방식은 비슷하지만 조금더 빠른 것 같다.


좋아요공감
공유하기통계글 요소
