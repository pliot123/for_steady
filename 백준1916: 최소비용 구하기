백준 1916 : 최소 비용 구하기
카테고리 없음 2022. 5. 12. 18:25
수정 | 비공개로 변경합니다 | 삭제
최소비용 구하기 성공
 

 
시간 제한메모리 제한제출정답맞힌 사람정답 비율
0.5 초	128 MB	51475	15612	10122	32.257%
문제
N개의 도시가 있다. 그리고 한 도시에서 출발하여 다른 도시에 도착하는 M개의 버스가 있다. 우리는 A번째 도시에서 B번째 도시까지 가는데 드는 버스 비용을 최소화 시키려고 한다. A번째 도시에서 B번째 도시까지 가는데 드는 최소비용을 출력하여라. 도시의 번호는 1부터 N까지이다.

입력
첫째 줄에 도시의 개수 N(1 ≤ N ≤ 1,000)이 주어지고 둘째 줄에는 버스의 개수 M(1 ≤ M ≤ 100,000)이 주어진다. 그리고 셋째 줄부터 M+2줄까지 다음과 같은 버스의 정보가 주어진다. 먼저 처음에는 그 버스의 출발 도시의 번호가 주어진다. 그리고 그 다음에는 도착지의 도시 번호가 주어지고 또 그 버스 비용이 주어진다. 버스 비용은 0보다 크거나 같고, 100,000보다 작은 정수이다.

그리고 M+3째 줄에는 우리가 구하고자 하는 구간 출발점의 도시번호와 도착점의 도시번호가 주어진다. 출발점에서 도착점을 갈 수 있는 경우만 입력으로 주어진다.

출력
첫째 줄에 출발 도시에서 도착 도시까지 가는데 드는 최소 비용을 출력한다.

예제 입력 1 복사
5
8
1 2 2
1 3 3
1 4 1
1 5 10
2 4 2
3 4 1
3 5 1
4 5 3
1 5
예제 출력 1 복사
4
출처
데이터를 추가한 사람: djm03178, qf9ar8nv, sait2000
시간 제한을 수정한 사람: djm03178
문제의 오타를 찾은 사람: HowlingOfSouL, ibjsw
잘못된 데이터를 찾은 사람: hsnks100
빠진 조건을 찾은 사람: jh05013, luke0201, toysmars
알고리즘 분류
그래프 이론
다익스트라
 
문제 - 1 페이지

 

www.acmicpc.net
 

 

전형적인 다익스트라 문제이다

 

#include<iostream>
#include<vector>
#include<queue>
using namespace std;
#define INF 987654321
int V, E;
int d[1001];
int start;
vector<pair<int, int>> Graph[1001];//목적지, 비용

void Dijkstra() {
	priority_queue<pair<int, int>> pq;//weight,idx

	pq.push({0,start});
	d[start] = 0;

	while (!pq.empty()) {
		int dist = -pq.top().first;
		int now = pq.top().second;
		pq.pop();

		if (d[now] < dist)continue;
		//거쳐가는 가는 Vertex기준으로 갱신해준다
		for (int i = 0; i < Graph[now].size(); i++) {
			int cost = Graph[now][i].second + dist;//거쳐서 가는 비용

			if (cost < d[Graph[now][i].first]) {//거쳐가는 비용이 기존의 최소비용보다 더 작으면
				d[Graph[now][i].first] = cost;//최소비용 갱신하고
				pq.push({ -cost, Graph[now][i].first });//이 새롭게 갱신된 vertex에서 다시 한번 따져봐야한다
			}
		}

	}

	
}

int main() {
	cin >> V >> E;
	
	for (int i = 1; i <= V; i++)
		d[i] = INF;

	for (int i = 0; i < E; i++) {
		int from, to, weight;
		cin >> from >> to >> weight;
		Graph[from].push_back({ to,weight });
	}
	cin >> start;
	
	int destination;
	cin >> destination;

	Dijkstra();

	cout << d[destination];
	return 0;
}
