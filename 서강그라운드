import com.sun.org.apache.xpath.internal.operations.Bool;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
import java.io.*;

class 서강그라운드 {
    static int N,M,answer;
    static int[][] map;
    static boolean[][] visited;
    static int dx[]={-1,1,0,0};
    static int dy[]={0,0,-1,1};

    public static void main(String[] args) throws Exception{

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N=Integer.parseInt(st.nextToken());
        M=Integer.parseInt(st.nextToken());
        map= new int[N][M];
        visited= new boolean[N][M];

        for(int i=0; i<N; i++){
            st = new StringTokenizer(br.readLine());

            for(int j=0; j<M; j++){
                map[i][j]= Integer.parseInt(st.nextToken());
            }
        }

//        for(int [] a : map) System.out.println(Arrays.toString(a));

        for(int i =0; i<N; i++){
            for(int j =0; j<M; j++){
                visited[i][j]=true;
                dfs(i,j,map[i][j],1);
                visited[i][j]=false;
                checkNotDfs(i,j);
            }
        }
        System.out.println(answer);
    }

    private static void checkNotDfs(int x, int y) {
        //ㅏ
        if(x-1>=0 && x+1<N && y+1<M)
            answer = Math.max(answer,(map[x][y]+map[x-1][y]+map[x+1][y]+map[x][y+1]));

        //ㅓ
        if(x-1>=0 && x+1<N && y-1>=0)
            answer = Math.max(answer,(map[x][y]+map[x-1][y]+map[x+1][y]+map[x][y-1]));

        //ㅗ
        if(y-1>=0 && y+1<M && x-1>=0)
            answer = Math.max(answer,(map[x][y]+map[x][y-1]+map[x][y+1]+map[x-1][y]));

        //ㅜ
        if(y-1>=0 && y+1<M && x+1<N)
            answer = Math.max(answer,(map[x][y]+map[x][y-1]+map[x][y+1]+map[x+1][y]));

    }

    private static void dfs(int x, int y, int sum, int idx) {

        if(idx==3){
            for(int i =0; i<4; i++){
                int nx = x+dx[i];
                int ny = y+dy[i];
                if(0<=nx&& nx<N && 0<=ny && ny<M&& !visited[nx][ny]){
                    answer=Math.max(answer,sum+map[nx][ny]);
                }
            }

            return;
        }

        for(int i =0; i<4; i++){
            int nx = x+dx[i];
            int ny = y+dy[i];
            if(0<=nx&& nx<N && 0<=ny && ny<M&& !visited[nx][ny]){
                visited[nx][ny]=true;
                dfs(nx,ny,sum+map[nx][ny],idx+1);
                visited[nx][ny]=false;
            }
        }

    }

}
