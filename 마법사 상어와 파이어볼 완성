마법사 상어와 파이어볼 성공

 
시간 제한메모리 제한제출정답맞힌 사람정답 비율
1 초	512 MB	10595	4067	2421	34.665%
문제
어른 상어가 마법사가 되었고, 파이어볼을 배웠다.

마법사 상어가 크기가 N×N인 격자에 파이어볼 M개를 발사했다. 가장 처음에 파이어볼은 각자 위치에서 이동을 대기하고 있다. i번 파이어볼의 위치는 (ri, ci), 질량은 mi이고, 방향은 di, 속력은 si이다. 위치 (r, c)는 r행 c열을 의미한다.

격자의 행과 열은 1번부터 N번까지 번호가 매겨져 있고, 1번 행은 N번과 연결되어 있고, 1번 열은 N번 열과 연결되어 있다.

파이어볼의 방향은 어떤 칸과 인접한 8개의 칸의 방향을 의미하며, 정수로는 다음과 같다.

7	0	1
6	
2
5	4	3
마법사 상어가 모든 파이어볼에게 이동을 명령하면 다음이 일들이 일어난다.

모든 파이어볼이 자신의 방향 di로 속력 si칸 만큼 이동한다.
이동하는 중에는 같은 칸에 여러 개의 파이어볼이 있을 수도 있다.
이동이 모두 끝난 뒤, 2개 이상의 파이어볼이 있는 칸에서는 다음과 같은 일이 일어난다.
같은 칸에 있는 파이어볼은 모두 하나로 합쳐진다.
파이어볼은 4개의 파이어볼로 나누어진다.
나누어진 파이어볼의 질량, 속력, 방향은 다음과 같다.
질량은 ⌊(합쳐진 파이어볼 질량의 합)/5⌋이다.
속력은 ⌊(합쳐진 파이어볼 속력의 합)/(합쳐진 파이어볼의 개수)⌋이다.
합쳐지는 파이어볼의 방향이 모두 홀수이거나 모두 짝수이면, 방향은 0, 2, 4, 6이 되고, 그렇지 않으면 1, 3, 5, 7이 된다.
질량이 0인 파이어볼은 소멸되어 없어진다.
마법사 상어가 이동을 K번 명령한 후, 남아있는 파이어볼 질량의 합을 구해보자.

입력
첫째 줄에 N, M, K가 주어진다.

둘째 줄부터 M개의 줄에 파이어볼의 정보가 한 줄에 하나씩 주어진다. 파이어볼의 정보는 다섯 정수 ri, ci, mi, si, di로 이루어져 있다.

서로 다른 두 파이어볼의 위치가 같은 경우는 입력으로 주어지지 않는다.

출력
마법사 상어가 이동을 K번 명령한 후, 남아있는 파이어볼 질량의 합을 출력한다.

제한
4 ≤ N ≤ 50
0 ≤ M ≤ N2
1 ≤ K ≤ 1,000
1 ≤ ri, ci ≤ N
1 ≤ mi ≤ 1,000
1 ≤ si ≤ 1,000
0 ≤ di ≤ 7
예제 입력 1 복사
4 2 1
1 1 5 2 2
1 4 7 1 6
예제 출력 1 복사
8
예제 입력 2 복사
4 2 2
1 1 5 2 2
1 4 7 1 6
예제 출력 2 복사
8
예제 입력 3 복사
4 2 3
1 1 5 2 2
1 4 7 1 6
예제 출력 3 복사
0
예제 입력 4 복사
7 5 3
1 3 5 2 4
2 3 5 2 6
5 2 9 1 7
6 2 1 3 5
4 4 2 4 2
예제 출력 4 복사
9
사고 과정



마법사 상어와 파이어 볼
일단 방향부터 정의해야한다.

int dy[8] = {-1,-1,0,1,1,1,0,-1};
int dx[8] = {0,1,1,1,0,-1,-1,-1};


그 다음 한칸에 여러 파이어볼이 있을 수 있다고 하니 vector로 Map을 구성할려고 했는데, 뭔가 구조체로 해야할 꺼 같은 기분이 듦.
이럴 땐 문제를 다시 읽어보자.

벡터로 하되, 벡터의 성질은 정수말고 구조체로 집어넣어보자.

그리고 옮길때

//여기서 만약 이동시키고 남아있는거 싹 지운다면
//1->2로 이동했는데 2차례가 되서 1에서 2로 이동한 
//파이어볼 들이 다 사라질 수도 있다.

그래서 옮길때 잘 옮겨야한다.

그러면 이동 중인 파이어볼이 담길 통이 있어야한다.
or deque를 이용해서 앞뒤로 왔다갔다하면 되는데 번거로울꺼같다.

파이어볼이 담길 통을 하나 더 만들어보자.

vector<info> basket;
여기다가 다 때려박는거다.
다 때려박으면 향후 문제가 없는지 고려해봐야한다.
없는 거 같다.

방향도
701
6X2
543
파이어볼 정보
1 1 5 2 2 //행 열 질량 이동속도 방향
1 4 7 1 6
1번 예시
x 0 0 y  
0 0 0 0  
0 0 0 0
0 0 0 0
--------
0 0 B 0
0 0 0 0
0 0 0 0 
0 0 0 0

현재 B의 위치에서 Y축으로
-3하면 아래로 한칸이다
-3 == +1이랑 같단 말이다

#include<iostream>
#include<vector>
using namespace std;

struct info {
	int y, x, m, s, d;//좌표 축 y,x,질량,방향,속도
};

int dy[8] = {-1,-1,0,1,1,1,0,-1};
int dx[8] = {0, 1,1,1,0,-1,-1,-1};
int N, M, K;//맵 크기, 파이볼 갯수 , 명령할 이동
vector<info> Map[51][51];
vector<info> basket;
void simul() {
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++) {
			if (Map[i][j].empty())continue;
			int size = Map[i][j].size();
			for (int a = 0; a < size; a++) {
				info FB = Map[i][j][a];
				int jumpY = (dy[FB.d] * FB.s) % N;
				if (jumpY < 0)jumpY += N;
				int jumpX = (dx[FB.d] * FB.s) % N;
				if (jumpX < 0)jumpX += N;
				int ny = (i + jumpY) % N;
				int nx = (j + jumpX) % N;
				
				FB.y = ny, FB.x = nx;
				basket.push_back(FB);
			}
			Map[i][j].clear();//맵 비우기
		}
	for (int i = 0; i < basket.size(); i++) {
		int y = basket[i].y, x = basket[i].x;
		Map[y][x].push_back(basket[i]);//순서대로 바스켓 뿌려주기
	}
	basket.clear();
	//이제 합쳐주기만 하면 된다.
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++) {
			if (Map[i][j].size()<2)continue;//사이즈가 2보다 작으면 다음
			bool h_flag = false;//홀
			bool j_flag = false;//짝
			int M=0, S=0;//질량과 속력
			int size = Map[i][j].size();
			for (int a = 0; a < size; a++) {
				M += Map[i][j][a].m;
				S += Map[i][j][a].s;
				if (Map[i][j][a].d % 2 == 1)
					h_flag = true;
				else
					j_flag = true;
			}
			Map[i][j].clear();//맵 비워주고
			if (M / 5 < 1)continue; //질량이 0보다 작아질 경우 넣지 않음
			if ((h_flag == true && j_flag == false) || (h_flag == false && j_flag == true)) {
				//짝수 이거나 홀 수 이면
				Map[i][j].push_back({ i,j,M / 5, S / size,0 });
				Map[i][j].push_back({ i,j,M / 5, S / size,2 });
				Map[i][j].push_back({ i,j,M / 5, S / size,4 });
				Map[i][j].push_back({ i,j,M / 5, S / size,6 });
			}
			else {
				Map[i][j].push_back({ i,j,M / 5, S / size,1 });
				Map[i][j].push_back({ i,j,M / 5, S / size,3 });
				Map[i][j].push_back({ i,j,M / 5, S / size,5 });
				Map[i][j].push_back({ i,j,M / 5, S / size,7 });
			}

		}


}



int main() {

	cin >> N >> M >> K;

	for (int i = 0; i < M; i++) {
		int y, x, m, d, s;
		cin >> y >> x >> m >> s >> d;
		y--, x--;
		Map[y][x].push_back({ y,x,m,s,d });
	}//맵에 정보를 담음
	for (int i = 0; i < K; i++) {
		simul();
	}
	int sum = 0;
	for(int i =0; i<N;i++)	
		for (int j = 0; j < N; j++) {
			if (!Map[i][j].empty()) {
				for (int a = 0; a < Map[i][j].size(); a++) {
					sum += Map[i][j][a].m;
				}
			}
		}
	cout << sum;

	return 0;
}
모듈러 연산을 어떻게 다루냐가 파이어볼 이동의 관건이라 해도 과언이 아닌 문제이다.﻿

구현 자체는 크게 어렵지 않고, 좀 까다로운게 모듈러연산으로 파이어볼을 이동시켜주는 것인데

인덱스가 1부터 시작하면 모듈러연산을 모듈러연산이 까다로워진다.

그렇기에 그냥 x,y를 입력받자마자 --연산으로 1을 빼고 인덱스를 0부터 잡아줬다.﻿

