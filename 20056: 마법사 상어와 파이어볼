#include<iostream>
#include<vector>
using namespace std;

struct info {
	int y, x, m, d, s;//좌표 축 y,x,질량,방향,속도
};

int dy[8] = {-1,-1,0,1,1,1,0,-1};
int dx[8] = {0,1,1,1,0,-1,-1,-1};
int N, M, K;//맵 크기, 파이볼 갯수 , 명령할 이동
vector<info> Map[51][51];
vector<info> basket;
void simul() {
	for (int i = 1; i <= N; i++)
		for (int j = 1; j <= N; j++) {
			if (Map[i][j].empty())continue;
			int size = Map[i][j].size();
			for (int a = 0; a < size; a++) {
				info FB = Map[i][j][a];
				while (ny < 0)
					ny += N;
				while (nx < 0)
					nx += N;
				FB.y = ny, FB.x = nx;
				basket.push_back(FB);
			}
			Map[i][j].clear();//맵 비우기
		}
	for (int i = 0; i < basket.size(); i++) {
		int y = basket[i].y, x = basket[i].x;
		Map[y][x].push_back(basket[i]);//순서대로 바스켓 뿌려주기
	}
	basket.clear();
	//이제 합쳐주기만 하면 된다.
	for (int i = 1; i <= N; i++)
		for (int j = 1; j <= N; j++) {
			if (Map[i][j].size()<2)continue;//사이즈가 2보다 작으면 다음
			bool h_flag = false;//홀
			bool j_flag = false;//짝
			int M=0, S=0;//질량과 속력
			int size = Map[i][j].size();
			for (int a = 0; a < size; i++) {
				M += Map[i][j][a].m;
				S += Map[i][j][a].s;
				if (Map[i][j][a].d % 2 == 1)
					h_flag = true;
				else
					j_flag = true;
			}
			Map[i][j].clear();//맵 비워주고
			if (M / 5 > 1)continue; //질량이 0보다 작아질 경우 넣지 않음
			if ((h_flag == true && j_flag == false) || (h_flag == false && j_flag == true)) {
				//짝수 이거나 홀 수 이면
				Map[i][j].push_back({ i,j,M / 5, S / size,0 });
				Map[i][j].push_back({ i,j,M / 5, S / size,2 });
				Map[i][j].push_back({ i,j,M / 5, S / size,4 });
				Map[i][j].push_back({ i,j,M / 5, S / size,6 });
			}
			else {
				Map[i][j].push_back({ i,j,M / 5, S / size,1 });
				Map[i][j].push_back({ i,j,M / 5, S / size,3 });
				Map[i][j].push_back({ i,j,M / 5, S / size,5 });
				Map[i][j].push_back({ i,j,M / 5, S / size,7 });
			}

		}


}



int main() {

	cin >> N >> M >> K;

	for (int i = 0; i < M; i++) {
		int y, x, m, d, s;
		cin >> y >> x >> m >> s >> d;
		Map[y][x].push_back({ y,x,m,s,d });
	}//맵에 정보를 담음
	for (int i = 0; i < K; i++) {
		simul();
	}
	int sum = 0;
	for(int i =1; i<=N;i++)	
		for (int j = 1; j <= N; j++) {
			if (!Map[i][j].empty()) {
				for (int a = 0; a < Map[i][j].size(); a++) {
					sum += Map[i][j][a].m;
				}
			}
		}
	cout << sum;

	return 0;
}

풀다가 못풀어서 코드저장용으로 올린다!
