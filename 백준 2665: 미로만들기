미로만들기 성공

 
시간 제한메모리 제한제출정답맞힌 사람정답 비율
1 초	128 MB	8596	4658	3456	55.331%
문제
n×n 바둑판 모양으로 총 n2개의 방이 있다. 일부분은 검은 방이고 나머지는 모두 흰 방이다. 검은 방은 사면이 벽으로 싸여 있어 들어갈 수 없다. 서로 붙어 있는 두 개의 흰 방 사이에는 문이 있어서 지나다닐 수 있다. 윗줄 맨 왼쪽 방은 시작방으로서 항상 흰 방이고, 아랫줄 맨 오른쪽 방은 끝방으로서 역시 흰 방이다.

시작방에서 출발하여 길을 찾아서 끝방으로 가는 것이 목적인데, 아래 그림의 경우에는 시작방에서 끝 방으로 갈 수가 없다. 부득이 검은 방 몇 개를 흰 방으로 바꾸어야 하는데 되도록 적은 수의 방의 색을 바꾸고 싶다.

아래 그림은 n=8인 경우의 한 예이다.


위 그림에서는 두 개의 검은 방(예를 들어 (4,4)의 방과 (7,8)의 방)을 흰 방으로 바꾸면, 시작방에서 끝방으로 갈 수 있지만, 어느 검은 방 하나만을 흰 방으로 바꾸어서는 불가능하다. 검은 방에서 흰 방으로 바꾸어야 할 최소의 수를 구하는 프로그램을 작성하시오.

단, 검은 방을 하나도 흰방으로 바꾸지 않아도 되는 경우는 0이 답이다.

입력
첫 줄에는 한 줄에 들어가는 방의 수 n(1 ≤ n ≤ 50)이 주어지고, 다음 n개의 줄의 각 줄마다 0과 1이 이루어진 길이가 n인 수열이 주어진다. 0은 검은 방, 1은 흰 방을 나타낸다.

출력
첫 줄에 흰 방으로 바꾸어야 할 최소의 검은 방의 수를 출력한다.

예제 입력 1 복사
8
11100110
11010010
10011010
11101100
01000111
00110001
11011000
11000111
예제 출력 1 복사
2
#include<iostream>
#include<string>
#include<vector>
#include<cstring>
#include<queue>
using namespace std;
int Map[50][50];
int visited[50][50];
int dy[4] = { -1,1,0,0 };
int dx[4] = { 0,0,-1,1 };
int n;
int answer = 987654321;
void bfs() {
	queue<pair<pair<int, int>,int>> q;
	q.push({ {0,0},0 });
	visited[0][0] = 0;
	while (!q.empty()) {
		int y = q.front().first.first;
		int x = q.front().first.second;
		int cost = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if (ny >= 0 && nx >= 0 && ny < n && nx < n && cost < visited[ny][nx]){
				if (Map[ny][nx] == 0) {
					q.push({ {ny,nx},cost + 1 });
					visited[ny][nx] = cost+1;
				}
				else {
					q.push({ {ny,nx},cost });
					visited[ny][nx] = cost;
				}
				
			}
		}
	}
}

int main() {
	cin >> n;
	for (int i = 0; i < n; i++) {
		string s; cin >> s;
		for (int j = 0; j < s.size(); j++) {
			Map[i][j] = s[j] - '0';
			visited[i][j] = 987654321;
		}
	}
	bfs();

	cout << visited[n-1][n-1];
	return 0;
}
처음에는 dfs로 완전탐색을 진행하고 진행할때마다 bfs로 Map[n-1][n-1]에 도달할 수 있는지를 확인하는 식으로 풀었다.

하지만 시간이 너~~~~~~무 많이 걸린다는 걸 깨닫고 검색을 통해 bfs한방에 해결하는 방식을 발견했다.

bfs를 통해서 지나갈 수 있는 공간이면 cost를 그대로 붙이고, 만약 벽을 부셔야한다면 cost+1을 해준다.﻿

근데 그럼

만약 지도가 

1 1﻿ 1 1

1 1 0 1

1 0 0 1

1 1 1 1

이라면 visited배열은

1 1 1 0

1 2 0 0

1 0 0 0

0 0 0 0

이상태를 마주하게 될텐데 사실 1,1은 벽을 하나만 부셔도 통과할 수 있다.

그렇기에 테두리 까지 bfs에서 돌아가면

1 1 1 1

1 2 1 1

1 1 0 0

1 1 0 0이상태에서

cost < visited[ny][nx] 

이 조건에 의해서 

1.1 아래나 오른쪽의 cost가 1임으로 2를 다시 1로 갱신해준다. 



그렇게 되면 

0 0 0 1 2 2 2 3
0 0 1 1 2 3 2 3
0 1 1 1 1 2 2 3
0 0 0 1 1 1 2 2
1 0 1 2 2 1 1 1
2 1 1 1 2 2 2 1
1 1 2 1 1 2 3 2
1 1 2 2 2 2 2 2

이런 배열이 완성되고 최종까지 가는데 부셔야하는 벽돌의 개수는 2가 된다.
