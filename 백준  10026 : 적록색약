 10026번
제출
맞힌 사람
숏코딩
재채점 결과
채점 현황
내 제출
 난이도 기여
강의
질문 검색
적록색약 성공다국어
한국어   
 
시간 제한메모리 제한제출정답맞힌 사람정답 비율
1 초	128 MB	30487	17636	13734	57.402%
문제
적록색약은 빨간색과 초록색의 차이를 거의 느끼지 못한다. 따라서, 적록색약인 사람이 보는 그림은 아닌 사람이 보는 그림과는 좀 다를 수 있다.

크기가 N×N인 그리드의 각 칸에 R(빨강), G(초록), B(파랑) 중 하나를 색칠한 그림이 있다. 그림은 몇 개의 구역으로 나뉘어져 있는데, 구역은 같은 색으로 이루어져 있다. 또, 같은 색상이 상하좌우로 인접해 있는 경우에 두 글자는 같은 구역에 속한다. (색상의 차이를 거의 느끼지 못하는 경우도 같은 색상이라 한다)

예를 들어, 그림이 아래와 같은 경우에

RRRBB
GGBBB
BBBRR
BBRRR
RRRRR
적록색약이 아닌 사람이 봤을 때 구역의 수는 총 4개이다. (빨강 2, 파랑 1, 초록 1) 하지만, 적록색약인 사람은 구역을 3개 볼 수 있다. (빨강-초록 2, 파랑 1)

그림이 입력으로 주어졌을 때, 적록색약인 사람이 봤을 때와 아닌 사람이 봤을 때 구역의 수를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 N이 주어진다. (1 ≤ N ≤ 100)

둘째 줄부터 N개 줄에는 그림이 주어진다.

출력
적록색약이 아닌 사람이 봤을 때의 구역의 개수와 적록색약인 사람이 봤을 때의 구역의 수를 공백으로 구분해 출력한다.

예제 입력 1 복사
5
RRRBB
GGBBB
BBBRR
BBRRR
RRRRR
예제 출력 1 복사
4 3
출처
Olympiad > USA Computing Olympiad > 2013-2014 Season > USACO March 2014 Contest > Bronze 3번

문제를 번역한 사람: baekjoon
어색한 표현을 찾은 사람: corea
알고리즘 분류
그래프 이론
그래프 탐색
너비 우선 탐색
깊이 우선 탐색
메모


코드 

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

string s[101];

int dy[4] = { 0,0,1,-1 };
int dx[4] = { 1,-1,0,0 };
int n;
bool visited[101][101];

void dfs(char color, int y, int x) {
    
    for (int i = 0; i < 4; i++) {
        int ny = y + dy[i];
        int nx = x + dx[i];

        if (ny > n - 1 || nx > n - 1 || ny < 0 || nx < 0)continue;

        if (s[ny][nx] == color && visited[ny][nx] == false)
        {
            visited[ny][nx] = true;
            dfs(color, ny, nx);
        }
    }
}


void dfs2(char color, int y, int x) {

    for (int i = 0; i < 4; i++) {
        int ny = y + dy[i];
        int nx = x + dx[i];

        if (ny > n - 1 || nx > n - 1 || ny < 0 || nx < 0)continue;

        if (visited[ny][nx] == false)
        {
            if (color == 'R' && s[ny][nx] =='G') {
                visited[ny][nx] = true;
                dfs2(s[ny][nx], ny, nx);
            }
            else if (color == 'G' && s[ny][nx] == 'R') {
                visited[ny][nx] = true;
                dfs2(s[ny][nx], ny, nx);
            }
            else if (color == s[ny][nx]) {
                visited[ny][nx] = true;
                dfs2(s[ny][nx], ny, nx);
            }

        }
    }
}


int main() {
    int cnt1 = 0;
    int cnt2 = 0;
    cin >> n;

    for (int i = 0; i < n; i++) {
        cin >> s[i];
    }


    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (visited[i][j] == false)
            {
                visited[i][j] = true;
                dfs(s[i][j], i, j);
                cnt1++;
            }
        }
    }

    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            visited[i][j] = 0;


    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (visited[i][j] == false)
            {
                visited[i][j] = true;
                dfs2(s[i][j], i, j);
                cnt2++;
            }
        }
    }

    cout << cnt1 << ' '  <<  cnt2 << '\n';

    return 0;
}



문제 푸는 속도가 좀 늘었당20분정도..? 걸린다.
