#include<iostream>
using namespace std;
int N;
int Map[500][500];

int dy[4] = {0,1,0,-1};
int dx[4] = {-1,0,1,0};
int answer;
int all;
int spreadY[4][10] = { { -1,1,-1,1,-1,1,-2,2,0,0 },
					   { 0,0,1,1,2,2,1,1,3,2 },
					   { -1,1,-1,1,-1,1,-2,2,0,0 },
					   { 0,0,-1,-1,-2,-2,-1,-1,-3,-2 } };
int spreadX[4][10] = { { 0,0,-1,-1,-2,-2,-1,-1,-3,-2 },
					   { -1,1,-1,1,-1,1,-2,2,0,0 },
					   { 0,0,1,1,2,2,1,1,3,2 },
					   { -1,1,-1,1,-1,1,-2,2,0,0 } };

int Sand_Percent[9] = { 1,1,7,7,10,10,2,2,5 };


void push(int y, int x, int dir) {
	int sand = Map[y][x];

	for (int i = 0; i < 9; i++) {
		int ny = y + spreadY[dir][i];
		int nx = x + spreadX[dir][i];
		int Per = Sand_Percent[i];
		int Sand_Part = (sand * Per) / 100;
		// 모래가 격자 바깥으로 이동한 경우
		if (ny < 0 || ny >= N || nx< 0 || nx>= N) {
			answer += Sand_Part;
		}
		else {
			Map[ny][nx] += Sand_Part;
		}
		sand -= Sand_Part;
		// 흩날린 모래의 양만큼 계속 빼주면 α가 적혀있는 칸으로 흩날릴 모래의 양만 남게 될 것이다.
	}
	int ny = y + spreadY[dir][9];
	int nx = x + spreadX[dir][9];
	if (ny < 0 || ny >= N || nx< 0 || nx>= N) {
		answer += sand;
	}
	else {
		Map[ny][nx] += sand;
	}
	Map[y][x] = 0; // 모래가 다 흩날리고 나면 Y 칸에 남은 모래는 0이 될 것이다.

}

void tonado() {
	int y = N/2, x = N / 2;
	int curve = 1;
	int cnt = 0;
	int dir = 0;
	while (1) {

		for (int i = 0; i < curve; i++) {
			y += dy[dir], x += dx[dir];
			push(y,x,dir);
			//cout << "Y와 X는 " << y << ' ' << x << endl;
			if (y == 0 && x == 0)break;
		}
		if (y == 0 && x == 0)break;
		dir = (dir + 1) % 4;


		for (int i = 0; i < curve; i++) {
			y += dy[dir], x += dx[dir];
			push(y, x, dir);
			//cout << "Y와 X는 " << y << ' ' << x << endl;
			if (y == 0 && x == 0)break;
		}
		if (y == 0 && x == 0)break;
		dir = (dir + 1) % 4;

		curve++;
	}
}



int main() {
	cin >> N;
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++) {
			cin >> Map[i][j];
			if (Map[i][j] > 0)
				all += Map[i][j];
		}
	tonado();
	cout << answer;
	return 0;
}
