가장 먼 노드
프로그래머스 문제 줄여서(프문) 2022. 2. 26. 18:50
수정 | 비공개로 변경합니다 | 삭제
가장 먼 노드
문제 설명
n개의 노드가 있는 그래프가 있습니다. 각 노드는 1부터 n까지 번호가 적혀있습니다. 1번 노드에서 가장 멀리 떨어진 노드의 갯수를 구하려고 합니다. 가장 멀리 떨어진 노드란 최단경로로 이동했을 때 간선의 개수가 가장 많은 노드들을 의미합니다.

노드의 개수 n, 간선에 대한 정보가 담긴 2차원 배열 vertex가 매개변수로 주어질 때, 1번 노드로부터 가장 멀리 떨어진 노드가 몇 개인지를 return 하도록 solution 함수를 작성해주세요.

제한사항
노드의 개수 n은 2 이상 20,000 이하입니다.
간선은 양방향이며 총 1개 이상 50,000개 이하의 간선이 있습니다.
vertex 배열 각 행 [a, b]는 a번 노드와 b번 노드 사이에 간선이 있다는 의미입니다.
입출력 예nvertexreturn
6	[[3, 6], [4, 3], [3, 2], [1, 3], [1, 2], [2, 4], [5, 2]]	3
입출력 예 설명
예제의 그래프를 표현하면 아래 그림과 같고, 1번 노드에서 가장 멀리 떨어진 노드는 4,5,6번 노드입니다.


그림을 인접리스트로 표현하면

이렇게 된다 .


 

 

그럼 이제 큐와 벡터를 하나씩 준비해서 

처음 1을 pop시키고 1에 관련된 리스트의 원소를 vector에 저장한다.

저장된 vector를 원소별로 한꺼번 꺼내서 이어지는 원소가 있으면 queue에다가 한꺼번에 푸쉬한다.

이런식으로 하면 최종적인 과정에서 맨 멀리있는 노드가 담기고 한번에 pop하면서 갯수를 세어주면 된다.

#include <string>
#include <vector>
#include <queue> 

using namespace std;
bool visited[20000];

int solution(int n, vector<vector<int>> edge) {    
    queue<int> q;
    vector<vector<int>> list(n+1);
    for (int i = 0; i < edge.size(); i++) {
        list[edge[i][0]].push_back(edge[i][1]);
        list[edge[i][1]].push_back(edge[i][0]);
    }

    q.push(1);
    visited[1]=true;
    vector<int> a;
    int cnt;

    while(!q.empty()){
        cnt =0;
        while(!q.empty()){
            a.push_back(q.front());
            q.pop();
            cnt++;
        }
        for(int i =0 ; i<a.size();i++){
            for(int j = 0 ; j < list[a[i]].size(); j++){
                if(visited[list[a[i]][j]]==false){
                visited[list[a[i]][j]]=true;
                q.push(list[a[i]][j]);
                }    
            }
        }

    }
    int answer = cnt;
    return answer;
}
