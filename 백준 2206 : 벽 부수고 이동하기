벽 부수고 이동하기 성공
 
시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
2 초	192 MB	79506	19518	12155	22.843%
문제
N×M의 행렬로 표현되는 맵이 있다. 맵에서 0은 이동할 수 있는 곳을 나타내고, 1은 이동할 수 없는 벽이 있는 곳을 나타낸다. 당신은 (1, 1)에서 (N, M)의 위치까지 이동하려 하는데, 이때 최단 경로로 이동하려 한다. 최단경로는 맵에서 가장 적은 개수의 칸을 지나는 경로를 말하는데, 이때 시작하는 칸과 끝나는 칸도 포함해서 센다.

만약에 이동하는 도중에 한 개의 벽을 부수고 이동하는 것이 좀 더 경로가 짧아진다면, 벽을 한 개 까지 부수고 이동하여도 된다.

한 칸에서 이동할 수 있는 칸은 상하좌우로 인접한 칸이다.

맵이 주어졌을 때, 최단 경로를 구해 내는 프로그램을 작성하시오.

입력
첫째 줄에 N(1 ≤ N ≤ 1,000), M(1 ≤ M ≤ 1,000)이 주어진다. 다음 N개의 줄에 M개의 숫자로 맵이 주어진다. (1, 1)과 (N, M)은 항상 0이라고 가정하자.

출력
첫째 줄에 최단 거리를 출력한다. 불가능할 때는 -1을 출력한다.

예제 입력 1 
6 4
0100
1110
1000
0000
0111
0000
예제 출력 1 
15
예제 입력 2 
4 4
0111
1111
1111
1110
예제 출력 2 
-1
출처
데이터를 추가한 사람: djm03178, jh05013, Picasso, sait2000, YunGoon
문제의 오타를 찾은 사람: ntopia

말 그대로 벽을 부수고 이동해야한다. 처음에는 bfs라면 왠지 하나씩 벽을 지우고 돌려봐도 될 꺼같다는 무모한 생각이 들어서 역시나 fail 
짜면서도 조마조마했는데 역시는 역시더라. 그래서 한참을 고민하다가 결국 인터넷에서 방법을 찾았다.
코드 
#include <iostream>
#include <queue>
#include <string>
using namespace std;
int arr[1001][1001];
int visited[1001][1001][2];
int dy[4] = { 1,-1,0 ,0 };
int dx[4] = { 0,0, -1, 1 };
int n, m; 

int bfs() {
    queue<pair<int, pair<int, int>>> q;// 벽 뚫었는지 조건 체크
    q.push({ 1,{0,0} });
    visited[0][0][1]=1;

    while (!q.empty()) {
        int block = q.front().first;
        int y = q.front().second.first;
        int x = q.front().second.second;
        q.pop();

        for (int i = 0; i < 4; i++) {
            int ny = y + dy[i];
            int nx = x + dx[i];

            
            if (y == n - 1 && x == m - 1)return visited[y][x][block];


            if (ny > n - 1 || nx > m - 1 || ny < 0 || nx < 0)continue;
            
            // 갈 수없는 길이고, 벽 아직 안뚫었을때
            if (arr[ny][nx] == 1 && block == true) {
                visited[ny][nx][block - 1] = visited[y][x][block] + 1;
                q.push({ block-1,{ny,nx} });
            }

            //// 갈 수있는 길이고, 방문하지 않았다면
            if (arr[ny][nx] == 0 && visited[ny][nx][block] == false) {
                visited[ny][nx][block] = visited[y][x][block] + 1;
                q.push({ block,{ny,nx} });
            }
        }
    }
    return -1;
}

int main() {
    cin >> n >> m;
    for (int i = 0; i < n; i++) {
        string temp;
        cin >> temp;
        for (int j = 0; j < m; j++) {
            arr[i][j] =  temp[j]- '0';
        }
    }
    cout << bfs();
    return 0;
}

2차원 배열을 2개만들어서 벽을 부순 세상과 안부순 세상을 전개하면 된다.
