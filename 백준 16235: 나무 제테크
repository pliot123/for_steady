나무 재테크 성공

 
시간 제한메모리 제한제출정답맞힌 사람정답 비율
0.3 초 (하단 참고)	512 MB	42683	10320	5508	21.584%
문제
부동산 투자로 억대의 돈을 번 상도는 최근 N×N 크기의 땅을 구매했다. 상도는 손쉬운 땅 관리를 위해 땅을 1×1 크기의 칸으로 나누어 놓았다. 각각의 칸은 (r, c)로 나타내며, r은 가장 위에서부터 떨어진 칸의 개수, c는 가장 왼쪽으로부터 떨어진 칸의 개수이다. r과 c는 1부터 시작한다.

상도는 전자통신공학과 출신답게 땅의 양분을 조사하는 로봇 S2D2를 만들었다. S2D2는 1×1 크기의 칸에 들어있는 양분을 조사해 상도에게 전송하고, 모든 칸에 대해서 조사를 한다. 가장 처음에 양분은 모든 칸에 5만큼 들어있다.

매일 매일 넓은 땅을 보면서 뿌듯한 하루를 보내고 있던 어느 날 이런 생각이 들었다.

나무 재테크를 하자!

나무 재테크란 작은 묘목을 구매해 어느정도 키운 후 팔아서 수익을 얻는 재테크이다. 상도는 나무 재테크로 더 큰 돈을 벌기 위해 M개의 나무를 구매해 땅에 심었다. 같은 1×1 크기의 칸에 여러 개의 나무가 심어져 있을 수도 있다.

이 나무는 사계절을 보내며, 아래와 같은 과정을 반복한다.

봄에는 나무가 자신의 나이만큼 양분을 먹고, 나이가 1 증가한다. 각각의 나무는 나무가 있는 1×1 크기의 칸에 있는 양분만 먹을 수 있다. 하나의 칸에 여러 개의 나무가 있다면, 나이가 어린 나무부터 양분을 먹는다. 만약, 땅에 양분이 부족해 자신의 나이만큼 양분을 먹을 수 없는 나무는 양분을 먹지 못하고 즉시 죽는다.

여름에는 봄에 죽은 나무가 양분으로 변하게 된다. 각각의 죽은 나무마다 나이를 2로 나눈 값이 나무가 있던 칸에 양분으로 추가된다. 소수점 아래는 버린다.

가을에는 나무가 번식한다. 번식하는 나무는 나이가 5의 배수이어야 하며, 인접한 8개의 칸에 나이가 1인 나무가 생긴다. 어떤 칸 (r, c)와 인접한 칸은 (r-1, c-1), (r-1, c), (r-1, c+1), (r, c-1), (r, c+1), (r+1, c-1), (r+1, c), (r+1, c+1) 이다. 상도의 땅을 벗어나는 칸에는 나무가 생기지 않는다.

겨울에는 S2D2가 땅을 돌아다니면서 땅에 양분을 추가한다. 각 칸에 추가되는 양분의 양은 A[r][c]이고, 입력으로 주어진다.

K년이 지난 후 상도의 땅에 살아있는 나무의 개수를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 N, M, K가 주어진다.

둘째 줄부터 N개의 줄에 A배열의 값이 주어진다. r번째 줄의 c번째 값은 A[r][c]이다.

다음 M개의 줄에는 상도가 심은 나무의 정보를 나타내는 세 정수 x, y, z가 주어진다. 처음 두 개의 정수는 나무의 위치 (x, y)를 의미하고, 마지막 정수는 그 나무의 나이를 의미한다.

출력
첫째 줄에 K년이 지난 후 살아남은 나무의 수를 출력한다.

제한
1 ≤ N ≤ 10
1 ≤ M ≤ N2
1 ≤ K ≤ 1,000
1 ≤ A[r][c] ≤ 100
1 ≤ 입력으로 주어지는 나무의 나이 ≤ 10
입력으로 주어지는 나무의 위치는 모두 서로 다름
예제 입력 1 복사
1 1 1
1
1 1 1
예제 출력 1 복사
1
예제 입력 2 복사
1 1 4
1
1 1 1
예제 출력 2 복사
0
예제 입력 3 복사
5 2 1
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 1 3
3 2 3
예제 출력 3 복사
2
예제 입력 4 복사
5 2 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 1 3
3 2 3
예제 출력 4 복사
15
예제 입력 5 복사
5 2 3
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 1 3
3 2 3
예제 출력 5 복사
13
예제 입력 6 복사
5 2 4
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 1 3
3 2 3
예제 출력 6 복사
13
예제 입력 7 복사
5 2 5
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 1 3
3 2 3
예제 출력 7 복사
13
예제 입력 8 복사
5 2 6
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 1 3
3 2 3
예제 출력 8 복사
85
노트
나무 재테크와 관련된 내용은 이 링크를 참고했다.





일단
첫째 줄 N,M,K는 각각 땅크기,나무갯수, 흘러야하는 시간이다. 
둘째 줄에는 양분이 어디에 얼만큼 들어갈 건지를
결정하는 A배열이 입력되고
셋째 줄에는 
나무의 좌표 x,y 그리고 나무의 나이 3이 주어진다.

이러면 나무를 담는 배열을 새로 만들어야하는게 아닌가하는 생각이 든다.
그리고 나무가 1x1 땅에 여러 개가 자랄 수 있는 것도 구현난이도를 올리는 거 같다. 그럼 나무 심는 땅을 어떻게 구현해야할까?
음... 왠지 bfs로 해결할 수 있을 꺼 같다.
다시, 봄 여름 가을 겨울에 각각 일어나는 일을 구현해야하고, 맨 마지막해에 나무를 세어줘야하니까 나무갯수를 카운트하는 것도 만들어야한다.
그럼 사계절 함수를 새로 만들어줘야할까?
bfs로 한번에 같이해결해야할까? 일단 입력부터 받아보자.

실패한 코드
#include <iostream>
#include <queue>
using namespace std;
int n, m, k;//땅 크기,나무 개수,k는 흐를시간
int land[11][11];//처음 땅
int A[11][11];// 추가되는 양분
int dy[8] = { -1,-1,-1,0,0,1,1,1 };
int dx[8] = { -1,0,1,-1,1,-1,0,1 };
struct tree {
int x, y, old;
};
queue<tree> trees;

void one_year(int tree_cnt) {
int x, y, old;
while (tree_cnt--) {
//봄+여름
x = trees.front().x;
y = trees.front().y;
old = trees.front().old;
trees.pop();
if (land[y][x] < old){//나이보다 양분이 적으면 죽고 여름이되어 사방에 양분을 뿌려준다.
land[y][x] += old/2;//양분을 못먹고 죽었으니까 현재 나이의 반틈만큼 그 땅에 양분을 더해준다..
continue;//죽으면 가을 겨울에 할일이 없다.
}
else {//양분을 먹을 수 있으면 먹고
land[y][x] -= old;//먹은 양분만큼 빼준다.
}
old++;
//가을
if (old % 5 == 0) {
for (int i = 0; i < 8; i++) {
int nx = x + dx[i], ny = y + dy[i];
if (nx<1 || ny<1 || nx>n || ny>n)continue;
trees.push({ nx,ny,1 });
}
}
trees.push({ x,y,old});
}
//겨울

for (int a = 1; a <= n; a++)
for (int b = 1; b <= n; b++)
land[a][b] += A[a][b];//겨울 양분추가

}

int main() {
cin >> n >> m >> k;
int answer = 0;

for (int i = 1; i <= n; i++) {
for (int j = 1; j <= n; j++) {
cin >> A[i][j];
land[i][j] = 5;
}
}
tree a;
for (int i = 0; i < m; i++) {
cin >> a.x >> a.y >> a.old;
trees.push(a);
}

for (int i = 0; i < k; i++) {
int tree_cnt = trees.size();
one_year(tree_cnt);
}
answer = trees.size();
cout << answer;

return 0;
}

이렇게 구현해주었으나, 이러면 나무가 먼저심겼는지, 나중에 심겼는지 확인이 불가능하다.
결국 3차원으로 구현을 해줘야한다는 것이다.

성공한 코드
#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>

using namespace std;

int dy[] = { -1,-1,-1,0,0,1,1,1 };
int dx[] = { -1,0,1,-1,1,-1,0 ,1 };
vector <int> tree[11][11]; //나무 저장
int A[11][11]; //로봇이 주는 양분
int land[11][11]; //현재 양분

int n, m, k;

void SpringSummer() {
for (int i = 1; i <= n; i++) {
for (int j = 1; j <= n; j++) {

sort(tree[i][j].begin(), tree[i][j].end());
int flag = 0;
for (int num = 0; num < tree[i][j].size(); num++) {
if (land[i][j] >= tree[i][j][num] && !flag) {
land[i][j] -= tree[i][j][num];
tree[i][j][num]++;
}
else {
flag = 1;
land[i][j] += tree[i][j][num] / 2;
tree[i][j].erase(tree[i][j].begin() + num);
num--; 
m--;
}
}
}
}
}

void FallWinter() {
for (int i = 1; i <= n; i++) {
for (int j = 1; j <= n; j++) {
for (int num = 0; num < tree[i][j].size(); num++) {
if (tree[i][j][num] % 5 == 0) {
for (int k = 0; k < 8; k++) {
int ny = i + dy[k];
int nx = j + dx[k];
if (ny > n || ny <= 0 || nx > n || nx <= 0) continue;
tree[ny][nx].push_back(1);
m++;
}
}
}
land[i][j] += A[i][j];
}
}
}

int solve() {
for (int year = 0; year < k; year++) {
SpringSummer();
if (m == 0) return 0;
FallWinter();
}
return m;
}

int main() {
cin >> n >> m >> k;
int answer = 0;

for (int i = 1; i <= n; i++) {
for (int j = 1; j <= n; j++) {
cin >> A[i][j];
land[i][j] = 5;
}
}


int x, y, old;
for (int i = 0; i < m; i++) {
cin >> x >> y >> old;
tree[x][y].push_back(old);
}

cout << solve();
}
