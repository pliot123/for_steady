정수 삼각형
문제 설명

위와 같은 삼각형의 꼭대기에서 바닥까지 이어지는 경로 중, 거쳐간 숫자의 합이 가장 큰 경우를 찾아보려고 합니다. 아래 칸으로 이동할 때는 대각선 방향으로 한 칸 오른쪽 또는 왼쪽으로만 이동 가능합니다. 예를 들어 3에서는 그 아래칸의 8 또는 1로만 이동이 가능합니다.

삼각형의 정보가 담긴 배열 triangle이 매개변수로 주어질 때, 거쳐간 숫자의 최댓값을 return 하도록 solution 함수를 완성하세요.

제한사항
삼각형의 높이는 1 이상 500 이하입니다.
삼각형을 이루고 있는 숫자는 0 이상 9,999 이하의 정수입니다.
입출력 예triangleresult
[[7], [3, 8], [8, 1, 0], [2, 7, 4, 4], [4, 5, 2, 6, 5]]	30
출처

 
Sweden

International Olympiad in Informatics – Statistics Contact information Participation in IOI (based on database records) First participation: 1990Years participated: 32Contestants participated: 86 Perfomance in IOI Gold medals: 13Silver medals: 30Bronze m

stats.ioinformatics.org
알고리즘 수업들으면서 과제로 받았던 문제

#include <string>
#include <vector>
#include <iostream>
int arr[501][501];
using namespace std;

int solution(vector<vector<int>> triangle) {
    int answer = 0;
    arr[0][0]=triangle[0][0];
    for(int i =1;i<triangle.size();i++){
        for(int j =0; j<triangle[i].size();j++){
            if(j==0)
                arr[i][j]=triangle[i][j]+arr[i-1][j];
            else if(j==i)
                arr[i][j]=triangle[i][j]+arr[i-1][j-1];
            else
                arr[i][j]=triangle[i][j]+max(arr[i-1][j],arr[i-1][j-1]);
        }
    }
    answer=-1;
    for(int i =0 ;i< triangle.size(); i++){
        if(arr[triangle.size()-1][i]>answer)
            answer=arr[triangle.size()-1][i];
    }
    return answer;
}

 

int arr[501][501]배열에

모서리 값은 그대로 내려오도록하고

사잇값은 2개의 선택지 중에 비교해준다. 그래서 맨 마지막 칸에 있는 젤 큰 값은 닶이 된다. 
