여행경로
문제 설명
주어진 항공권을 모두 이용하여 여행경로를 짜려고 합니다. 항상 "ICN" 공항에서 출발합니다.

항공권 정보가 담긴 2차원 배열 tickets가 매개변수로 주어질 때, 방문하는 공항 경로를 배열에 담아 return 하도록 solution 함수를 작성해주세요.

제한사항
모든 공항은 알파벳 대문자 3글자로 이루어집니다.
주어진 공항 수는 3개 이상 10,000개 이하입니다.
tickets의 각 행 [a, b]는 a 공항에서 b 공항으로 가는 항공권이 있다는 의미입니다.
주어진 항공권은 모두 사용해야 합니다.
만일 가능한 경로가 2개 이상일 경우 알파벳 순서가 앞서는 경로를 return 합니다.
모든 도시를 방문할 수 없는 경우는 주어지지 않습니다.
입출력 예ticketsreturn
[["ICN", "JFK"], ["HND", "IAD"], ["JFK", "HND"]]	["ICN", "JFK", "HND", "IAD"]
[["ICN", "SFO"], ["ICN", "ATL"], ["SFO", "ATL"], ["ATL", "ICN"], ["ATL","SFO"]]	["ICN", "ATL", "ICN", "SFO", "ATL", "SFO"]
입출력 예 설명
예제 #1

["ICN", "JFK", "HND", "IAD"] 순으로 방문할 수 있습니다.

예제 #2

["ICN", "SFO", "ATL", "ICN", "ATL", "SFO"] 순으로 방문할 수도 있지만 ["ICN", "ATL", "ICN", "SFO", "ATL", "SFO"] 가 알파벳 순으로 앞섭니다.

 

코드

#include <string>
#include <vector>
#include <algorithm>
using namespace std;
bool visited[10001];
vector<string> tmp;
vector<string> answer;
int max_cnt =0;
void dfs(vector<vector<string>> tickets, string word, int cnt){
    if(max_cnt<cnt){
        max_cnt =cnt;
        tmp.push_back(word);
        answer=tmp;
    }
    else
        tmp.push_back(word);
    
    for(int i=0; i<tickets.size();i++){
        if(visited[i]==false && tickets[i][0] == word){
            visited[i]=true;
            dfs(tickets,tickets[i][1],cnt+1);
            visited[i]=false;
        }
    }
    tmp.pop_back();
}

vector<string> solution(vector<vector<string>> tickets) {
    
    sort(tickets.begin(),tickets.end());
    dfs(tickets, "ICN", 0);
    return answer;
}

 


  

음 경우의 수가 저렇게 떨어진다. 

고려해야할 부분은

1. dfs를 실행하면서 dfs로 들어갔는데, 빨간 글씨로 적힌 다음경로가 끊겼을 경우

2. 정렬해주고 dfs를 돌리면 코드 구조상 3가지 조합에 도달한다 .

depth가 6일때

맨 왼쪽으로 떨어지는 조합, 중간으로 떨어지는 조합, 3번째로 떨어지는 조합 

근데 정답에서 정렬순서대로 출력할려면  처음 dfs를 타고가서 depth가 6인걸 발견했을 때를 출력해야한다. 그래서 answer에 

 

if(max_cnt<cnt){
        max_cnt =cnt;
        tmp.push_back(word);
        answer=tmp;
    } 최고값이 바뀔 때가 처음 만나는 조합임으로 

이 값만 answer에 저장해두고 다음 똑같은 depth의 새로운 조합이 나와도 answer는 바꾸지 않는다.

그러면 dfs가 다 돌때까지 answer에는 첫번째만난 조합만 남게 된다.

아 그리고 

v.pop_back();
생각보다 유용한 거 같다. 저장 저장.
