거짓말 성공


 
시간 제한메모리 제한제출정답맞힌 사람정답 비율
2 초	128 MB	12500	5053	4033	42.772%
문제
지민이는 파티에 가서 이야기 하는 것을 좋아한다. 파티에 갈 때마다, 지민이는 지민이가 가장 좋아하는 이야기를 한다. 지민이는 그 이야기를 말할 때, 있는 그대로 진실로 말하거나 엄청나게 과장해서 말한다. 당연히 과장해서 이야기하는 것이 훨씬 더 재미있기 때문에, 되도록이면 과장해서 이야기하려고 한다. 하지만, 지민이는 거짓말쟁이로 알려지기는 싫어한다. 문제는 몇몇 사람들은 그 이야기의 진실을 안다는 것이다. 따라서 이런 사람들이 파티에 왔을 때는, 지민이는 진실을 이야기할 수 밖에 없다. 당연히, 어떤 사람이 어떤 파티에서는 진실을 듣고, 또다른 파티에서는 과장된 이야기를 들었을 때도 지민이는 거짓말쟁이로 알려지게 된다. 지민이는 이런 일을 모두 피해야 한다.

사람의 수 N이 주어진다. 그리고 그 이야기의 진실을 아는 사람이 주어진다. 그리고 각 파티에 오는 사람들의 번호가 주어진다. 지민이는 모든 파티에 참가해야 한다. 이때, 지민이가 거짓말쟁이로 알려지지 않으면서, 과장된 이야기를 할 수 있는 파티 개수의 최댓값을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 사람의 수 N과 파티의 수 M이 주어진다.

둘째 줄에는 이야기의 진실을 아는 사람의 수와 번호가 주어진다. 진실을 아는 사람의 수가 먼저 주어지고 그 개수만큼 사람들의 번호가 주어진다. 사람들의 번호는 1부터 N까지의 수로 주어진다.

셋째 줄부터 M개의 줄에는 각 파티마다 오는 사람의 수와 번호가 같은 방식으로 주어진다.

N, M은 50 이하의 자연수이고, 진실을 아는 사람의 수는 0 이상 50 이하의 정수, 각 파티마다 오는 사람의 수는 1 이상 50 이하의 정수이다.

출력
첫째 줄에 문제의 정답을 출력한다.





#include<iostream>
#include<vector>
#include<queue>
using namespace std;
int N, M;//사람 수 파티 수
int T;//진실을 아는 사람 수
vector<int> v[51];
vector<int> know;
int parent[51];
int Find(int x) {
	if (x == parent[x])
		return x;
	else
		return parent[x] = Find(parent[x]);
}

void Union(int x,int y) {
	x = Find(x);
	y = Find(y);
	if (x != y)
		parent[y] = x;
}
int main() {
	cin >> N >> M;
	cin >> T;
	int input, input2, k;

	for (int i = 1; i <= N; i++)parent[i] = i;
	
	for (int i = 0; i < T; i++) {
		cin >> input2;
		know.push_back(input2);
	}

	for (int i = 0; i < M; i++) {
		cin >> k;
		for (int j = 0; j < k; j++) {
			cin >> input;
			v[i].push_back(input);
		}
	}

	for (int i = 0; i < M; i++) {
		int std = v[i][0];
		for (int j = 1; j < v[i].size(); j++)
			Union(std, v[i][j]);
	}
	
	for (auto& list : v) {
		bool flag = false;
		for (auto& person : list) {
			if (flag) break;
			for (auto& t : know) {
				if (Find(person) == Find(t)) {
					flag = true;
					break;
				}
			}
		}
		if (flag)M--;
	}

	cout << M << '\n';
	return 0;
}


진실을 알고 있는 사람들의 번호를 know에 담아준다.

그리고 입력받는 각 파티의 사람들을 Union함수를 통해서 같은 파티끼리의 사람들을 묶어주고

모든 파티의 각 사람들을 know배열과 한명씩 비교해보는데 Find 함수를 통해서 루트노트와 서로 비교해보고 Know의 원소의 루트노드와 각 파티의 원소의 루트노드를 비교해보고 같다면 진실을 공유하기때문에 M을 1씩 감소시킨다.﻿
