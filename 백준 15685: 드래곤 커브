드래곤 커브 성공
 

 
시간 제한메모리 제한제출정답맞힌 사람정답 비율
1 초	512 MB	17987	10139	6776	54.018%
문제
드래곤 커브는 다음과 같은 세 가지 속성으로 이루어져 있으며, 이차원 좌표 평면 위에서 정의된다. 좌표 평면의 x축은 → 방향, y축은 ↓ 방향이다.

시작 점
시작 방향
세대
0세대 드래곤 커브는 아래 그림과 같은 길이가 1인 선분이다. 아래 그림은 (0, 0)에서 시작하고, 시작 방향은 오른쪽인 0세대 드래곤 커브이다.


1세대 드래곤 커브는 0세대 드래곤 커브를 끝 점을 기준으로 시계 방향으로 90도 회전시킨 다음 0세대 드래곤 커브의 끝 점에 붙인 것이다. 끝 점이란 시작 점에서 선분을 타고 이동했을 때, 가장 먼 거리에 있는 점을 의미한다.


2세대 드래곤 커브도 1세대를 만든 방법을 이용해서 만들 수 있다. (파란색 선분은 새로 추가된 선분을 나타낸다)


3세대 드래곤 커브도 2세대 드래곤 커브를 이용해 만들 수 있다. 아래 그림은 3세대 드래곤 커브이다.


즉, K(K > 1)세대 드래곤 커브는 K-1세대 드래곤 커브를 끝 점을 기준으로 90도 시계 방향 회전 시킨 다음, 그것을 끝 점에 붙인 것이다.

크기가 100×100인 격자 위에 드래곤 커브가 N개 있다. 이때, 크기가 1×1인 정사각형의 네 꼭짓점이 모두 드래곤 커브의 일부인 정사각형의 개수를 구하는 프로그램을 작성하시오. 격자의 좌표는 (x, y)로 나타내며, 0 ≤ x ≤ 100, 0 ≤ y ≤ 100만 유효한 좌표이다.

입력
첫째 줄에 드래곤 커브의 개수 N(1 ≤ N ≤ 20)이 주어진다. 둘째 줄부터 N개의 줄에는 드래곤 커브의 정보가 주어진다. 드래곤 커브의 정보는 네 정수 x, y, d, g로 이루어져 있다. x와 y는 드래곤 커브의 시작 점, d는 시작 방향, g는 세대이다. (0 ≤ x, y ≤ 100, 0 ≤ d ≤ 3, 0 ≤ g ≤ 10)

입력으로 주어지는 드래곤 커브는 격자 밖으로 벗어나지 않는다. 드래곤 커브는 서로 겹칠 수 있다.

방향은 0, 1, 2, 3 중 하나이고, 다음을 의미한다.

0: x좌표가 증가하는 방향 (→)
1: y좌표가 감소하는 방향 (↑)
2: x좌표가 감소하는 방향 (←)
3: y좌표가 증가하는 방향 (↓)
삼성 18년도 기출문제인데, 드래곤 커브가 생겨나는 방향성만 파악하면 구현은 크게 어렵지 않다.


0             :0 세대
0 1           :1 세대
0 1 2 1      :2 세대
0 1 2 1 2 3 2 1 : 3세대

이런식으로 세대가 거듭하면 방향이 뒤부터 +1해서 벡터로 push_back시켜주면 된다.

 

 

#include <iostream>
#include <vector>
using namespace std;
int dy[4] = {0,-1,0,1};
int dx[4] = {1,0,-1,0};
int arr[101][101];
int cnt;
void check() {
for (int i = 0; i < 100; i++) {
for (int j = 0; j < 100; j++) {
if (arr[i][j] == 1 && arr[i][j + 1] == 1 && arr[i + 1][j + 1] == 1 && arr[i + 1][j] == 1)
cnt++;
}
}
}
int main() {
int n;
cin >> n;

for (int i = 0; i < n; i++) {
int x, y, d, g;
cin >> x >> y >> d >> g;
arr[y][x] = 1;
// 시작 방향, 세대
vector<int> v;
v.push_back(d);
/*

0             :0 세대
0 1 : 1 세대
0 1 2 1 : 2 세대
0 1 2 1 2 3 2 1 : 3세대
*/
for (int a = 0; a < g; a++) {
for (int b = v.size()-1; b >=0; b--) {
int k = (v[b] + 1)%4;
v.push_back(k);
}
}

for (int o : v) {
x = x + dx[o],y = y + dy[o];
arr[y][x] = 1;
}
}

check();
cout << cnt;
return 0;
}


