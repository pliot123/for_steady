#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
#define max 100
int parent[max];
using namespace std;
int find_parent(int x)
{
    if (parent[x] == x)return x;
    else return parent[x] = find_parent(parent[x]);
}
bool sameparent(int x, int y)
{
    x = find_parent(x);
    y = find_parent(y);
    if (x == y)return true;
    else return false;
}


void Union(int x, int y)
{
    x = find_parent(x);
    y = find_parent(y);
    if (x != y)
    {
        parent[y] = x;
    }
}

bool cmp(vector<int> a, vector<int>b)
{
    return a[2] < b[2];
}

int solution(int n, vector<vector<int>> costs) {
    int answer = 0;
    sort(costs.begin(), costs.end(), &cmp);


    for (int i = 0; i < n; i++)
        parent[i]=i;



    for (int i = 0; i < costs.size(); i++)
    {
        int Cost = costs[i][2];
        int Node1 = costs[i][0];
        int Node2 = costs[i][1];

        if (sameparent(Node1, Node2) == false)
        {
            Union(Node1, Node2);
            answer = answer + Cost;
        }
    }


    return answer;
}
