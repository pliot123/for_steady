#include<iostream>
#include<cstring>
#include<vector>
using namespace std;

int N;
int Map[20][20];
int answer = 0; 


void left() {
	for (int i = 0; i < N; i++) {
		int same = 0;//합체하는 지점
		for (int j = 1; j < N; j++) {	
			int idx = j;
			if (Map[i][j] == 0)continue;
			while (idx && idx>same) {
				if (Map[i][idx - 1]==0) {//0이면 한칸 밀어주고 
					Map[i][idx - 1] = Map[i][idx];
					Map[i][idx] = 0;
				}
				else if (Map[i][idx - 1] == Map[i][idx]) {//합체하는 순간
						Map[i][idx - 1] += Map[i][idx];
						Map[i][idx] = 0;
						same=idx;
				}
				else if (Map[i][idx - 1] > 0 && Map[i][idx - 1] != Map[i][idx]) {
					break;
				}
				idx--;
			}
		}
	}
}
void right() {
	for (int i = N-1; i >= 0; i--) {
		int same = N-1;//기준
		for (int j = N-2; j >= 0; j--) {
			int idx = j;
			while ( idx < same) {
				if (Map[i][idx + 1] == 0) {//0이면 한칸 밀어주고 
					Map[i][idx + 1] = Map[i][idx];
					Map[i][idx] = 0;
				}
				else if (Map[i][idx + 1] == Map[i][idx]) {
					Map[i][idx + 1] += Map[i][idx];
					Map[i][idx] = 0;
					same= idx;
				}
				else if (Map[i][idx + 1] > 0 && Map[i][idx + 1] != Map[i][idx]) {
					break;
				}
				idx++;
			}
		}
	}
}
void up() {
	for (int i = 0; i < N; i++) {
		int same= 0;//기준
		for (int j = 1; j < N; j++) {
			int idx = j;
			while (idx && idx > same) {
				if (Map[idx - 1][i] == 0) {//0이면 한칸 밀어주고 
					Map[idx - 1][i] = Map[idx][i];
					Map[idx][i] = 0;
				}
				else if (Map[idx - 1][i] == Map[idx][i]) {
					Map[idx - 1][i] += Map[idx][i];
					Map[idx][i] = 0;
					same = idx;
				}
				else if (Map[idx - 1][i] > 0 && Map[idx - 1][i] != Map[idx][i]) {
					break;
				}
				idx--;
			}
		}
	}
}
void down() {
	for (int i = N - 1; i >= 0; i--) {
		int same = N-1;//기준
		for (int j = N - 2; j >= 0; j--) {
			int idx = j;
			while (idx < same) {
				if (Map[idx + 1][i] == 0) {//0이면 한칸 밀어주고 
					Map[idx + 1][i] = Map[idx][i];
					Map[idx][i] = 0;
				}
				else if (Map[idx + 1][i] == Map[idx][i]) {
					Map[idx + 1][i] += Map[idx][i];
					Map[idx][i] = 0;
					same = idx;
				}
				else if (Map[idx + 1][i] > 0 && Map[idx + 1][i] != Map[idx][i]) {
					break;
				}
				idx++;
			}
		}
	}
}
int Max() {
	int max = 0;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (Map[i][j] > max)
				max = Map[i][j];
		}
	}
	return max;
}

void dfs(int depth, int mode) {
	
	
	if (depth > 5) {
		answer = max(Max(), answer);
		return;
	}

	if (mode == 1)
		up();
	else if (mode == 2)
		down();
	else if (mode == 3)
		left();
	else if (mode == 4)
		right();
	

	int temp[20][20] = { 0, };
	memcpy(temp, Map, sizeof(Map));
	//----------------------------------여까지 맵이 그대로 살아있다.
	dfs(depth + 1, 1);//맵 오염됨
	memcpy(Map, temp, sizeof(Map));//그럼 탬트로 다시 돌려주고
	dfs(depth + 1, 2);
	memcpy(Map, temp, sizeof(Map));
	dfs(depth + 1, 3);
	memcpy(Map, temp, sizeof(Map));
	dfs(depth + 1, 4);
	memcpy(Map, temp, sizeof(Map));

}


int main() {
	cin >> N;

	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			cin >> Map[i][j];
	vector<int> temp;
	dfs(0, 0);

	cout << answer;

	return 0;
}​2048 (Easy) 성공
 

 
시간 제한메모리 제한제출정답맞힌 사람정답 비율
1 초	512 MB	58881	16519	9417	25.443%
문제
2048 게임은 4×4 크기의 보드에서 혼자 즐기는 재미있는 게임이다. 이 링크를 누르면 게임을 해볼 수 있다.

이 게임에서 한 번의 이동은 보드 위에 있는 전체 블록을 상하좌우 네 방향 중 하나로 이동시키는 것이다. 이때, 같은 값을 갖는 두 블록이 충돌하면 두 블록은 하나로 합쳐지게 된다. 한 번의 이동에서 이미 합쳐진 블록은 또 다른 블록과 다시 합쳐질 수 없다. (실제 게임에서는 이동을 한 번 할 때마다 블록이 추가되지만, 이 문제에서 블록이 추가되는 경우는 없다)

 	 	 
<그림 1>	<그림 2>	<그림 3>
<그림 1>의 경우에서 위로 블록을 이동시키면 <그림 2>의 상태가 된다. 여기서, 왼쪽으로 블록을 이동시키면 <그림 3>의 상태가 된다.

 	 	 	 
<그림 4>	<그림 5>	<그림 6>	<그림 7>
<그림 4>의 상태에서 블록을 오른쪽으로 이동시키면 <그림 5>가 되고, 여기서 다시 위로 블록을 이동시키면 <그림 6>이 된다. 여기서 오른쪽으로 블록을 이동시켜 <그림 7>을 만들 수 있다.

 	 
<그림 8>	<그림 9>
<그림 8>의 상태에서 왼쪽으로 블록을 옮기면 어떻게 될까? 2가 충돌하기 때문에, 4로 합쳐지게 되고 <그림 9>의 상태가 된다.

 	 	 	 
<그림 10>	<그림 11>	<그림 12>	<그림 13>
<그림 10>에서 위로 블록을 이동시키면 <그림 11>의 상태가 된다. 

<그림 12>의 경우에 위로 블록을 이동시키면 <그림 13>의 상태가 되는데, 그 이유는 한 번의 이동에서 이미 합쳐진 블록은 또 합쳐질 수 없기 때문이다.

 	 
<그림 14>	<그림 15>
마지막으로, 똑같은 수가 세 개가 있는 경우에는 이동하려고 하는 쪽의 칸이 먼저 합쳐진다. 예를 들어, 위로 이동시키는 경우에는 위쪽에 있는 블록이 먼저 합쳐지게 된다. <그림 14>의 경우에 위로 이동하면 <그림 15>를 만든다.

이 문제에서 다루는 2048 게임은 보드의 크기가 N×N 이다. 보드의 크기와 보드판의 블록 상태가 주어졌을 때, 최대 5번 이동해서 만들 수 있는 가장 큰 블록의 값을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 보드의 크기 N (1 ≤ N ≤ 20)이 주어진다. 둘째 줄부터 N개의 줄에는 게임판의 초기 상태가 주어진다. 0은 빈 칸을 나타내며, 이외의 값은 모두 블록을 나타낸다. 블록에 쓰여 있는 수는 2보다 크거나 같고, 1024보다 작거나 같은 2의 제곱꼴이다. 블록은 적어도 하나 주어진다.

출력
최대 5번 이동시켜서 얻을 수 있는 가장 큰 블록을 출력한다.

예제 입력 1 복사
3
2 2 2
4 4 4
8 8 8
예제 출력 1 복사
16
 

정확하게 이해하고 안풀면 큰일나는 문제다.

 

사고과정

틀릴만한 케이스 몇개를 적어놨다 이것만 통과하면 옮기는 것에는 무리가 없다

 

5
2 2 4 2 2
4 0 4 2 2
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
 
X
4 4 0 2 2
x
4 4 2 0 2
x
4 4 4



//2에서 합체가 일어나면 2에선 또다른 합체가 일어나면 안돼
7
4 32 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
이게 문제였다
올바르게 이동이 되려면 첫줄이
4 16 16 0 0 0 0
이렇게 되야한다
